{"version":3,"sources":["assets/pokeball.png","components/BottomNavigation/BottomNavigation.jsx","components/Typography/Typography.jsx","components/Card/Card.jsx","components/Pagination/Pagination.jsx","utilities/string.utils.js","actions/types.js","utilities/check-if-empty.utils.js","actions/actions.js","utilities/number.utils.js","containers/PokemonsList/PokemonsList.jsx","components/Button/Button.jsx","containers/MyPokemonList/MyPokemonList.jsx","containers/Home/Home.jsx","serviceWorker.js","utilities/local-storage.utils.js","reducers/pokemon-reducer.js","reducers/index.js","utilities/theme.const.js","components/FormDialog/FormDialog.jsx","components/Image/Image.jsx","components/List/List.jsx","components/Snackbar/Snackbar.jsx","containers/PokemonDetail/PokemonDetail.jsx","index.js"],"names":["useBottomNavigationActionStyles","makeStyles","root","color","selected","BottomNavigation","actions","selectedAction","onChange","props","bottomNavigationActionClasses","value","showLabels","className","map","action","i","classes","label","icon","Typography","variant","attributes","Card","labelVariant","children","styles","separateContentAndButtons","cardActionsChildren","style","cardContent","Divider","divider","cardActions","usePaginationStyles","ul","justifyContent","Pagination","pages","paginationClasses","count","siblingCount","toTitleCase","str","replace","toLowerCase","m","toUpperCase","FETCH_POKEMONS_LIST","FETCH_POKEMON_DETAIL","FETCH_MY_POKEMONS","CATCH_POKEMON","RELEASE_MY_POKEMON","SET_CURRENT_POKEMONS_LIST_PAGE","SET_CURRENT_MY_POKEMONS_LIST_PAGE","isEmpty","dataToBeChecked","_isEmptyObject","object","length","Object","keys","some","element","ROOT_URL","fetchPokemonsList","params","url","additionalParams","key","join","request","axios","get","catch","error","response","type","types","payload","fetchPokemonDetail","pokemonName","ceiling","valueToBeCalculated","Math","ceil","PokemonsList","dispatch","useDispatch","history","useHistory","useState","currentlyDisplayedPokemonsList","setCurrentlyDisplayedPokemonsList","allPokemonsList","useSelector","state","PokemonReducer","pokemonsList","currentPokemonsListPage","pageOffset","pageLimit","allPokemonsCount","useEffect","a","offset","limit","console","log","initialise","pokemon","name","onClick","push","_","newPage","setCurrentPokemonsListPage","page","Button","paddingBottom","paddingLeft","float","releaseButton","borderColor","marginTop","MyPokemonList","currentlyDisplayedMyPokemonsList","setCurrentlyDisplayedMyPokemonsList","myPokemonsList","myPokemonsListCount","currentMyPokemonsListPage","slice","reduce","result","onReleasePokemon","pokemonNickname","releaseMyPokemon","size","evt","preventDefault","stopPropagation","setCurrentMyPokemonsListPage","Home","setSelectedAction","renderBottomTab","newAction","Boolean","window","location","hostname","match","POKEMON_LOCAL_STORAGE_KEY","getItemFromLocalStorage","localStorageKey","itemFromLocalStorage","localStorage","getItem","JSON","parse","setItemToLocalStorage","valueForLocalStorage","setItem","stringify","removeItemFromLocalStorage","removeItem","initialState","pokemonsListCount","currentPokemon","searchTerm","status","data","results","moves","move","myPokemons","pokemons","newMyPokemons","newPokemonsList","rootReducer","combineReducers","PRIMARY_COLOR","SECONDARY_COLOR","theme","createMuiTheme","palette","primary","main","secondary","FormDialog","open","dialogTitle","setOpen","dialogSubTitle","textFieldLabel","textFieldValue","textFieldOnChange","dialogConfirmButtonLabel","onSubmit","autoFocus","margin","fullWidth","Image","src","listItem","backgroundColor","opacity","List","listItems","iconSelector","labelSelector","Alert","elevation","Snackbar","snackbarStatus","autoHideDuration","handleClose","handleSnackbarClose","reason","onClose","severity","message","pokemonDetailWrapper","marginBottom","avatar","width","height","padding","typesSection","movesSection","maxHeight","overflow","pokemonNameTitle","textAlign","catchPokemonButton","display","PokemonDetail","pokemonNameFromSlug","setSnackbarStatus","formDialogOpen","setFormDialogOpen","formDialogTextField","setFormDialogTextField","sprites","front_default","alt","random","target","checkIfPokemonNicknameAlreadyExists","catchPokemon","goBack","AppWrapper","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","basename","process","ThemeProvider","store","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65e4d108.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pokeball.4bab8b58.png\";","import React from \"react\";\nimport MuiBottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport MuiBottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport \"./BottomNavigation.css\";\n\nconst useBottomNavigationActionStyles = makeStyles({\n    root: {\n        // color: \"#fff\",\n        \"&$selected\": {\n            color: \"#7D4CDB\",\n        },\n    },\n    selected: {\n        color: \"#7D4CDB\",\n    },\n});\n\nconst BottomNavigation = ({ actions, selectedAction, onChange, ...props }) => {\n    const bottomNavigationActionClasses = useBottomNavigationActionStyles();\n    return (\n        <MuiBottomNavigation\n            value={selectedAction}\n            onChange={onChange}\n            showLabels\n            className=\"BottomNavigation-wrapper\"\n            {...props}\n        >\n            {actions.map((action, i) => {\n                return (\n                    <MuiBottomNavigationAction\n                        classes={{\n                            root: bottomNavigationActionClasses.root,\n                            selected: bottomNavigationActionClasses.selected,\n                        }}\n                        key={i}\n                        label={action.label}\n                        icon={action.icon}\n                        // className=\"BottomNavigation-action\"\n                    />\n                );\n            })}\n        </MuiBottomNavigation>\n    );\n};\n\nexport default BottomNavigation;\n","import React from \"react\";\nimport MuiTypography from \"@material-ui/core/Typography\";\n\n\nconst Typography = ({label, variant, ...attributes}) => {\n    return <MuiTypography variant={variant} {...attributes}>{label}</MuiTypography>\n}\n\nexport default Typography;","import React from \"react\";\nimport MuiCard from \"@material-ui/core/Card\";\nimport MuiCardActions from \"@material-ui/core/CardActions\";\nimport MuiCardContent from \"@material-ui/core/CardContent\";\n\nimport \"./Card.css\";\nimport Typography from \"../Typography/Typography\";\nimport { Divider } from \"@material-ui/core\";\n\nconst Card = ({ label, labelVariant = \"p\", children, styles = {}, separateContentAndButtons = false, ...attributes }) => {\n    const cardActionsChildren = children;\n    return (\n        <MuiCard className=\"Card-wrapper\" {...attributes}>\n            <MuiCardContent style={styles.cardContent}>\n                <Typography label={label} variant={labelVariant} />\n                {separateContentAndButtons &&<Divider style={styles.divider} />}\n                {!!cardActionsChildren ? (\n                    <MuiCardActions style={styles.cardActions}>\n                        {cardActionsChildren}\n                    </MuiCardActions>\n                ) : null}\n            </MuiCardContent>\n        </MuiCard>\n    );\n};\n\nexport default Card;\n","import React from \"react\";\nimport MuiPagination from \"@material-ui/lab/Pagination\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst usePaginationStyles = makeStyles({\n    ul: {\n        justifyContent: 'center',\n    }\n});\n\nconst Pagination = ({ pages, ...attributes }) => {\n    const paginationClasses = usePaginationStyles();\n    return <MuiPagination classes={paginationClasses} count={pages} color=\"primary\" siblingCount={1} {...attributes} />;\n};\n\nexport default Pagination;","export const toTitleCase = (str) => {\n    return str.replace(/([^A-Z])([A-Z])/g, '$1 $2') // split cameCase\n    .replace(/[_\\-]+/g, ' ') // split snake_case and lisp-case\n    .toLowerCase()\n    .replace(/(^\\w|\\b\\w)/g, function(m) { return m.toUpperCase(); }) // title case words\n    .replace(/\\s+/g, ' ') // collapse repeated whitespace\n    .replace(/^\\s+|\\s+$/, ''); // remove leading/trailing whitespace\n};\n","export const FETCH_POKEMONS_LIST = 'FETCH_POKEMONS_LIST';\nexport const FETCH_POKEMON_DETAIL = 'FETCH_POKEMON_DETAIL';\nexport const FETCH_MY_POKEMONS = 'FETCH_MY_POKEMONS';\nexport const CATCH_POKEMON = 'CATCH_POKEMON';\nexport const RELEASE_MY_POKEMON = 'RELEASE_MY_POKEMON';\nexport const SET_CURRENT_POKEMONS_LIST_PAGE = 'SET_CURRENT_POKEMONS_LIST_PAGE';\nexport const SET_CURRENT_MY_POKEMONS_LIST_PAGE = 'SET_CURRENT_MY_POKEMONS_LIST_PAGE';","export const isEmpty = (dataToBeChecked) => {\n  return (\n    dataToBeChecked == false ||\n    typeof dataToBeChecked === \"undefined\" ||\n    dataToBeChecked == null ||\n    (typeof dataToBeChecked === \"object\" && _isEmptyObject(dataToBeChecked))\n  );\n};\n\nexport const _isEmptyObject = (object) => {\n    if (typeof object.length === \"undefined\") {\n      // it's an Object, not an Array\n      var hasNonempty = Object.keys(object).some(function nonEmpty(element) {\n        return !isEmpty(object[element]);\n      });\n      return hasNonempty ? false : _isEmptyObject(Object.keys(object));\n    }\n\n    return !object.some(function nonEmpty(element) {\n      // check if array is really not empty as JS thinks\n      return !isEmpty(element); // at least one element should be non-empty\n    });\n  };","import axios from \"axios\"; //import axios library for performing ajax request\nimport * as types from \"../actions/types\";\nimport { isEmpty } from \"../utilities/check-if-empty.utils\";\n\nconst ROOT_URL = `https://pokeapi.co/api/v2`;\n\nexport const fetchPokemonsList = (params) => {\n    let url = `${ROOT_URL}/pokemon`;\n    if (!isEmpty(params)) {\n        const additionalParams = Object.keys(params)\n            .map((key) => key + \"=\" + params[key])\n            .join(\"&\");\n        if (additionalParams) {\n            url += `?${additionalParams}`;\n        }\n    }\n    const request = axios.get(url).catch((error) => {\n        return error.response;\n    });\n    return {\n\t\ttype: types.FETCH_POKEMONS_LIST,\n\t\tpayload: request\n\t};\n};\n\nexport const fetchPokemonDetail = (pokemonName) => {\n\tlet url = `${ROOT_URL}/pokemon/${pokemonName}`;\n    const request = axios.get(url).catch((error) => {\n        return error.response;\n    });\n    return {\n\t\ttype: types.FETCH_POKEMON_DETAIL,\n\t\tpayload: request\n\t};;\n}\n\nexport const fetchMyPokemons = () => {\n\treturn {\n\t\ttype: types.FETCH_MY_POKEMONS,\n\t}\n}\n\nexport const catchPokemon = (pokemonNickname, pokemonName) => {\n\treturn {\n\t\ttype: types.CATCH_POKEMON,\n\t\tpayload: {pokemonNickname, pokemonName}\n\t}\n}\n\nexport const releaseMyPokemon = (pokemonNickname) => {\n\treturn {\n\t\ttype: types.RELEASE_MY_POKEMON,\n\t\tpayload: pokemonNickname\n\t}\n}\n\nexport const setCurrentPokemonsListPage = (newPage) => {\n\treturn {\n\t\ttype: types.SET_CURRENT_POKEMONS_LIST_PAGE,\n\t\tpayload: newPage\n\t}\n}\n\nexport const setCurrentMyPokemonsListPage = (newPage) => {\n\treturn {\n\t\ttype: types.SET_CURRENT_MY_POKEMONS_LIST_PAGE,\n\t\tpayload: newPage\n\t}\n}","export const ceiling = (valueToBeCalculated) => {\n    return Math.ceil(valueToBeCalculated)\n}","import React, { useEffect, useState } from \"react\";\nimport Card from \"../../components/Card/Card\";\nimport Pagination from \"../../components/Pagination/Pagination\";\n\nimport { toTitleCase } from \"../../utilities/string.utils\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n    fetchPokemonDetail,\n    fetchPokemonsList,\n    setCurrentPokemonsListPage,\n} from \"../../actions/actions\";\nimport { ceiling } from \"../../utilities/number.utils\";\nimport { isEmpty } from \"../../utilities/check-if-empty.utils\";\n\nconst PokemonsList = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const [\n        currentlyDisplayedPokemonsList,\n        setCurrentlyDisplayedPokemonsList,\n    ] = useState([]);\n\n    const allPokemonsList = useSelector((state) => {\n        return state.PokemonReducer.pokemonsList;\n    });\n\n    const currentPokemonsListPage = useSelector((state) => {\n        return state.PokemonReducer.currentPokemonsListPage;\n    });\n    const pageOffset = useSelector((state) => {\n        return state.PokemonReducer.pageOffset;\n    });\n    const pageLimit = useSelector((state) => {\n        return state.PokemonReducer.pageLimit;\n    });\n    const allPokemonsCount = useSelector((state) => {\n        return state.PokemonReducer.allPokemonsCount;\n    });\n\n\n    useEffect(() => {\n        const initialise = async () => {\n            await dispatch(\n                fetchPokemonsList({ offset: pageOffset, limit: pageLimit })\n            );\n\n            console.log(\"abcabc\", allPokemonsList);\n        };\n        initialise();\n    }, []);\n\n    useEffect(() => {\n        console.log('abcabc', allPokemonsList)\n        if(!isEmpty(allPokemonsList[currentPokemonsListPage])) {\n            setCurrentlyDisplayedPokemonsList(allPokemonsList[currentPokemonsListPage]);\n        }\n    }, [allPokemonsList]);\n\n    const onChangePage = (_, newPage) => {\n        dispatch(setCurrentPokemonsListPage(newPage));\n        if (isEmpty(allPokemonsList[newPage])) {\n            dispatch(\n                fetchPokemonsList({\n                    offset: (newPage - 1) * pageLimit,\n                    limit: pageLimit,\n                })\n            );\n        } else {\n            setCurrentlyDisplayedPokemonsList(allPokemonsList[newPage]);\n        }\n    };\n\n    const onPokemonClick = (pokemonName) => {\n        dispatch(fetchPokemonDetail(pokemonName));\n        history.push(`/pokemon/${pokemonName}`);\n    };\n\n    return (\n        <div className=\"Global-content\">\n            {currentlyDisplayedPokemonsList.map((pokemon) => {\n                return (\n                    <Card\n                        label={toTitleCase(pokemon.name)}\n                        labelVariant=\"h6\"\n                        onClick={() => onPokemonClick(pokemon.name)}\n                    />\n                );\n            })}\n            <Pagination\n                onChange={onChangePage}\n                page={currentPokemonsListPage}\n                pages={ceiling(allPokemonsCount / pageLimit)}\n            />\n        </div>\n    );\n};\n\nexport default PokemonsList;","import React from \"react\";\nimport MuiButton from \"@material-ui/core/Button\";\n\nconst Button = ({ label, variant=\"outlined\", ...attributes }) => {\n    return <MuiButton variant={variant} color=\"primary\" {...attributes}>{label}</MuiButton>;\n};\n\nexport default Button;","import React, { useEffect, useState } from \"react\";\nimport Card from \"../../components/Card/Card\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    fetchMyPokemons,\n    fetchPokemonDetail,\n    releaseMyPokemon,\n    setCurrentMyPokemonsListPage,\n} from \"../../actions/actions\";\nimport { ceiling } from \"../../utilities/number.utils\";\nimport { useHistory } from \"react-router-dom\";\nimport Button from \"../../components/Button/Button\";\nimport { isEmpty } from \"../../utilities/check-if-empty.utils\";\n\nconst styles = {\n    cardContent: {\n        paddingBottom: 0,\n    },\n    cardActions: {\n        paddingLeft: 0,\n        float: \"right\",\n    },\n    releaseButton: {\n        color: \"#f44336\",\n        borderColor: \"#f44336\",\n    },\n    divider: {\n        marginTop: 20,\n    },\n};\n\nconst MyPokemonList = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const [\n        currentlyDisplayedMyPokemonsList,\n        setCurrentlyDisplayedMyPokemonsList,\n    ] = useState([]);\n\n    const myPokemonsList = useSelector((state) => {\n        return state.PokemonReducer.myPokemonsList;\n    });\n    const myPokemonsListCount = useSelector((state) => {\n        return state.PokemonReducer.myPokemonsListCount;\n    });\n    const currentMyPokemonsListPage = useSelector((state) => {\n        return state.PokemonReducer.currentMyPokemonsListPage;\n    });\n    const pageLimit = useSelector((state) => {\n        return state.PokemonReducer.pageLimit;\n    });\n\n    useEffect(() => {\n        dispatch(fetchMyPokemons());\n        setCurrentlyDisplayedMyPokemonsList(\n            Object.keys(myPokemonsList)\n                .slice(0, pageLimit)\n                .reduce((result, key) => {\n                    result[key] = myPokemonsList[key];\n                    return result;\n                }, {})\n        );\n    }, []);\n\n    useEffect(() => {\n        console.log('abcabc', myPokemonsList)\n        setCurrentlyDisplayedMyPokemonsList(\n            Object.keys(myPokemonsList)\n                .slice(\n                    (currentMyPokemonsListPage - 1) * pageLimit,\n                    (currentMyPokemonsListPage - 1) * pageLimit + pageLimit\n                )\n                .reduce((result, key) => {\n                    result[key] = myPokemonsList[key];\n                    return result;\n                }, {})\n        );\n    }, [currentMyPokemonsListPage, myPokemonsList]);\n\n    const onPokemonClick = (pokemonName) => {\n        dispatch(fetchPokemonDetail(pokemonName));\n        history.push(`/pokemon/${pokemonName}`);\n    };\n\n    const onChangePage = (_, newPage) => {\n        dispatch(setCurrentMyPokemonsListPage(newPage));\n    };\n\n    const onReleasePokemon = (pokemonNickname) => {\n        dispatch(releaseMyPokemon(pokemonNickname));\n    };\n\n    return (\n        <div className=\"Global-content\">\n            {!isEmpty(currentlyDisplayedMyPokemonsList) && (\n                <div>\n                    {Object.keys(currentlyDisplayedMyPokemonsList).map(\n                        (pokemonNickname) => {\n                            return (\n                                <Card\n                                    label={pokemonNickname}\n                                    labelVariant=\"h6\"\n                                    onClick={() =>\n                                        onPokemonClick(\n                                            myPokemonsList[pokemonNickname]\n                                        )\n                                    }\n                                    styles={styles}\n                                    separateContentAndButtons\n                                >\n                                    <Button\n                                        size=\"small\"\n                                        label=\"Release\"\n                                        style={styles.releaseButton}\n                                        onClick={(evt) => {\n                                            evt.preventDefault();\n                                            evt.stopPropagation();\n                                            onReleasePokemon(pokemonNickname);\n                                        }}\n                                    />\n                                </Card>\n                            );\n                        }\n                    )}\n                    <Pagination\n                        onChange={onChangePage}\n                        page={currentMyPokemonsListPage}\n                        pages={ceiling(myPokemonsListCount / pageLimit)}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default MyPokemonList;\n","import React, { useState } from \"react\";\nimport PokeballIcon from \"../../assets/pokeball.png\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport BottomNavigation from \"../../components/BottomNavigation/BottomNavigation\";\nimport PokemonsList from \"../PokemonsList/PokemonsList\";\n\nimport \"../../global.css\";\nimport MyPokemonList from \"../MyPokemonList/MyPokemonList\";\n\nconst Home = () => {\n    const [selectedAction, setSelectedAction] = useState(0);\n\n    const renderBottomTab = () => {\n        switch(selectedAction) {\n            case 0:\n                return <PokemonsList />\n            case 1:\n                return <MyPokemonList />\n            default:\n                return <PokemonsList />\n        }\n    }\n\n    return (\n        <div className=\"Global-wrapper\">\n            {renderBottomTab()}\n            <BottomNavigation\n                selectedAction={selectedAction}\n                onChange={(_, newAction) => setSelectedAction(newAction)}\n                actions={[\n                    { label: \"Pokemons List\", icon: <ListIcon /> },\n                    { label: \"My Pokemons\", icon: <FavoriteIcon /> },\n                ]}\n            />\n        </div>\n    );\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { isEmpty } from \"./check-if-empty.utils\";\n\nexport const POKEMON_LOCAL_STORAGE_KEY = 'MY_POKEMONS';\n\nexport const getItemFromLocalStorage = (localStorageKey) => {\n    const itemFromLocalStorage = localStorage.getItem(localStorageKey);\n    if (!isEmpty(itemFromLocalStorage)) {\n        return JSON.parse(itemFromLocalStorage);\n    }\n    return null;\n};\n\nexport const setItemToLocalStorage = (localStorageKey, valueForLocalStorage) =>\n    localStorage.setItem(localStorageKey, JSON.stringify(valueForLocalStorage));\n\nexport const removeItemFromLocalStorage = (localStorageKey) =>\n    localStorage.removeItem(localStorageKey);\n\nexport const checkIfPokemonNicknameAlreadyExists = (localStorageKey, pokemonNickname) => {\n    const myPokemons = getItemFromLocalStorage(localStorageKey);\n    if(!isEmpty(myPokemons) && myPokemons.pokemons[pokemonNickname]) {\n        return true;\n    }\n    return false;\n}","import * as types from \"../actions/types\";\nimport { isEmpty } from \"../utilities/check-if-empty.utils\";\nimport {\n    getItemFromLocalStorage,\n    POKEMON_LOCAL_STORAGE_KEY,\n    removeItemFromLocalStorage,\n    setItemToLocalStorage,\n} from \"../utilities/local-storage.utils\";\n\nconst initialState = {\n    pokemonsListCount: null,\n    pokemonsList: [],\n    currentPokemon: null,\n    myPokemonsList: {},\n    searchTerm: \"\",\n    myPokemonsListCount: null,\n    pageOffset: 0,\n    pageLimit: 20,\n    currentPokemonsListPage: 1,\n    currentMyPokemonsListPage: 1,\n};\n\nfunction PokemonReducer(state = initialState, action) {\n    switch (action.type) {\n        case types.FETCH_POKEMONS_LIST: {\n            if (action.payload.status === 200) {\n                return {\n                    ...state,\n                    pokemonsList: {\n                        ...state.pokemonsList,\n                        [state.currentPokemonsListPage]:\n                            action.payload.data.results,\n                    },\n                    allPokemonsCount: action.payload.data.count,\n                    pageOffset:\n                        (state.currentPokemonsListPage - 1) * state.pageLimit,\n                };\n            }\n        }\n        case types.FETCH_POKEMON_DETAIL: {\n            if (action.payload.status === 200) {\n                return {\n                    ...state,\n                    currentPokemon: {\n                        ...action.payload.data,\n                        types: action.payload.data.types.map(\n                            (type) => type.type\n                        ),\n                        moves: action.payload.data.moves.map(\n                            (move) => move.move\n                        ),\n                    },\n                };\n            }\n        }\n        case types.FETCH_MY_POKEMONS: {\n            let myPokemons = getItemFromLocalStorage(POKEMON_LOCAL_STORAGE_KEY);\n            if (isEmpty(myPokemons)) {\n                return {\n                    ...state,\n                    myPokemonsList: {},\n                    myPokemonsListCount: 0,\n                };\n            }\n            return {\n                ...state,\n                myPokemonsList: myPokemons.pokemons,\n                myPokemonsListCount: myPokemons.count,\n            };\n        }\n        case types.RELEASE_MY_POKEMON: {\n            const pokemonNickname = action.payload;\n            const myPokemons = getItemFromLocalStorage(\n                POKEMON_LOCAL_STORAGE_KEY\n            );\n            if (myPokemons.pokemons[pokemonNickname]) {\n                // (Logic): Check if the pokemon deleted is the last one\n                if (myPokemons.count === 1) {\n                    removeItemFromLocalStorage(POKEMON_LOCAL_STORAGE_KEY);\n                    return {\n                        ...state,\n                        myPokemonsList: {},\n                    };\n                } else {\n                    const {\n                        [pokemonNickname]: nickname,\n                        ...newMyPokemons\n                    } = myPokemons.pokemons;\n                    myPokemons.count -= 1;\n                    setItemToLocalStorage(POKEMON_LOCAL_STORAGE_KEY, {\n                        count: myPokemons.count,\n                        pokemons: newMyPokemons,\n                    });\n                    return {\n                        ...state,\n                        myPokemonsList: newMyPokemons,\n                    };\n                }\n            }\n            return {\n                ...state,\n                myPokemonsList: myPokemons,\n            };\n        }\n        case types.CATCH_POKEMON: {\n            let newPokemonsList;\n            const { pokemonNickname, pokemonName } = action.payload;\n            const myPokemons = getItemFromLocalStorage(\n                POKEMON_LOCAL_STORAGE_KEY\n            );\n\n            if (!isEmpty(myPokemons)) {\n                // (Logic): Check if there is existing pokemon\n                newPokemonsList = {\n                    count: myPokemons.count + 1,\n                    pokemons: {\n                        ...myPokemons.pokemons,\n                        [pokemonNickname]: pokemonName,\n                    },\n                };\n            } else {\n                newPokemonsList = {\n                    count: 1,\n                    pokemons: { [pokemonNickname]: pokemonName },\n                };\n            }\n\n            setItemToLocalStorage(POKEMON_LOCAL_STORAGE_KEY, newPokemonsList);\n            return {\n                ...state,\n                myPokemonsList: newPokemonsList,\n            };\n        }\n        case types.SET_CURRENT_POKEMONS_LIST_PAGE: {\n            const newPage = action.payload;\n            return {\n                ...state,\n                currentPokemonsListPage: newPage,\n            };\n        }\n        case types.SET_CURRENT_MY_POKEMONS_LIST_PAGE: {\n            const newPage = action.payload;\n            return {\n                ...state,\n                currentMyPokemonsListPage: newPage,\n            };\n        }\n        default:\n            return state;\n    }\n}\n\nexport default PokemonReducer;\n","import { combineReducers } from 'redux';\nimport PokemonReducer from './pokemon-reducer';\n\nconst rootReducer = combineReducers({\n    PokemonReducer\n});\n\nexport default rootReducer;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const PRIMARY_COLOR = '#7D4CDB';\nexport const SECONDARY_COLOR = '#11CB5F';\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: PRIMARY_COLOR,\n        },\n        secondary: {\n            // This is green.A700 as hex.\n            main: SECONDARY_COLOR,\n        },\n    },\n});\n","import React from \"react\";\nimport MuiTextField from \"@material-ui/core/TextField\";\nimport MuiDialog from \"@material-ui/core/Dialog\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogContentText from \"@material-ui/core/DialogContentText\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"../Button/Button\";\n\nconst FormDialog = ({\n    open,\n    setOpen,\n    dialogTitle,\n    dialogSubTitle,\n    textFieldLabel,\n    textFieldValue,\n    textFieldOnChange,\n    dialogConfirmButtonLabel,\n    onSubmit\n}) => {\n    const handleFormDialogClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <MuiDialog open={open}>\n            <MuiDialogTitle>{dialogTitle}</MuiDialogTitle>\n            <MuiDialogContent>\n                <MuiDialogContentText>{dialogSubTitle}</MuiDialogContentText>\n                <MuiTextField\n                    autoFocus\n                    margin=\"dense\"\n                    label={textFieldLabel}\n                    type=\"text\"\n                    fullWidth\n                    value={textFieldValue}\n                    onChange={textFieldOnChange}\n                />\n            </MuiDialogContent>\n            <MuiDialogActions>\n                <Button variant=\"text\" onClick={onSubmit} color=\"primary\" label={dialogConfirmButtonLabel}/>\n            </MuiDialogActions>\n        </MuiDialog>\n    );\n};\n\nexport default FormDialog;","import React from 'react';\nimport MuiAvatar from '@material-ui/core/Avatar';\n\n\nconst Image = ({url, ...attributes}) => {\n    return (\n        <MuiAvatar src={url} {...attributes} />\n    )\n}\n\nexport default Image;","import React from 'react';\nimport MuiList from '@material-ui/core/List';\nimport MuiListItem from '@material-ui/core/ListItem';\nimport MuiListItemIcon from '@material-ui/core/ListItemIcon';\nimport MuiListItemText from '@material-ui/core/ListItemText';\nimport { isEmpty } from '../../utilities/check-if-empty.utils';\nimport { toTitleCase } from '../../utilities/string.utils';\nimport { PRIMARY_COLOR, SECONDARY_COLOR } from '../../utilities/theme.const';\n\nconst styles = {\n    listItem: {\n        backgroundColor: PRIMARY_COLOR,\n        color: '#ffffff',\n        opacity: 0.75\n    }\n}\n\nconst List = ({listItems, iconSelector='icon', labelSelector='label'}) => {\n    return (\n        <MuiList>\n            {listItems.map((listItem, i) => {\n                return (\n                    <MuiListItem key={i} style={styles.listItem} divider>\n                        {!isEmpty(listItem[iconSelector]) ? <MuiListItemIcon>\n                            {listItem[iconSelector]}\n                        </MuiListItemIcon> : null}\n                        <MuiListItemText primary={toTitleCase(listItem[labelSelector])} />\n                    </MuiListItem>\n                )\n            })}\n        </MuiList>\n    )\n}\n\nexport default List;","import React from \"react\";\nimport MuiSnackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} {...props} />;\n}\n\n/**\n * Snackbar Component\n *\n * @since  09/08/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Boolean}  open  Open/close the Snackbar Component\n * @param {String}  severity  Predefined colour/styles from Material-UI for the Snackbar Component\n * @param {String}  message  Message inside the Snackbar Component\n * @param {NUMBER}  autoHideDuration  the duration until the Snackbar Component disappears\n * @param {Function}  handleClose  onChange handler\n * @param {String}  variant  Predefined styles from Material-UI for the Snackbar Component\n *\n */\nconst Snackbar = ({\n    snackbarStatus,\n    autoHideDuration,\n    handleClose,\n    variant,\n    ...attributes\n}) => {\n\n    const handleSnackbarClose = (_, reason) => {\n        if(reason === 'clickaway') {\n            return;\n        }\n        handleClose({...snackbarStatus, open: false})\n    }\n    return (\n        <MuiSnackbar\n            open={snackbarStatus.open}\n            autoHideDuration={autoHideDuration}\n            onClose={handleSnackbarClose}\n            {...attributes}\n        >\n            <Alert onClose={handleSnackbarClose} severity={snackbarStatus.severity} variant={variant}>\n                {snackbarStatus.message}\n            </Alert>\n        </MuiSnackbar>\n    );\n};\n\nexport default Snackbar;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { catchPokemon, fetchPokemonDetail } from \"../../actions/actions\";\nimport Button from \"../../components/Button/Button\";\nimport FormDialog from \"../../components/FormDialog/FormDialog\";\nimport Image from \"../../components/Image/Image\";\nimport List from \"../../components/List/List\";\nimport Snackbar from \"../../components/Snackbar/Snackbar\";\nimport Typography from \"../../components/Typography/Typography\";\nimport { isEmpty } from \"../../utilities/check-if-empty.utils\";\nimport { toTitleCase } from \"../../utilities/string.utils\";\nimport { PRIMARY_COLOR, SECONDARY_COLOR } from \"../../utilities/theme.const\";\nimport { useHistory } from \"react-router-dom\";\nimport { checkIfPokemonNicknameAlreadyExists, POKEMON_LOCAL_STORAGE_KEY } from \"../../utilities/local-storage.utils\";\n\nconst styles = {\n    pokemonDetailWrapper: {\n        marginBottom: 0,\n    },\n    avatar: {\n        margin: \"0 auto\",\n        width: 120,\n        height: 120,\n        backgroundColor: SECONDARY_COLOR,\n        padding: \"0.5em\",\n        opacity: 0.75,\n    },\n    typesSection: {\n        margin: \"1em\",\n    },\n    movesSection: {\n        margin: \"1em\",\n        maxHeight: 500,\n        overflow: \"auto\",\n    },\n    pokemonNameTitle: { textAlign: \"center\", color: PRIMARY_COLOR },\n    catchPokemonButton: {\n        display: \"block\",\n        width: \"95%\",\n        margin: \"0 auto\",\n    },\n};\n\nconst PokemonDetail = ({ match }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const pokemonNameFromSlug = match.params.pokemonName;\n\n    const [snackbarStatus, setSnackbarStatus] = useState({\n        open: false,\n        severity: \"\",\n        message: \"\",\n    });\n    const [formDialogOpen, setFormDialogOpen] = useState(false);\n    const [formDialogTextField, setFormDialogTextField] = useState('');\n\n\n    const currentPokemon = useSelector((state) => {\n        return state.PokemonReducer.currentPokemon;\n    });\n\n    const pokemonName = !isEmpty(currentPokemon)\n        ? toTitleCase(currentPokemon.name)\n        : \"-\";\n\n    useEffect(() => {\n        if (isEmpty(currentPokemon)) {\n            dispatch(fetchPokemonDetail(pokemonNameFromSlug));\n        }\n    }, []);\n\n    const isSuccess = () => Math.random() < 0.5;\n\n    const onCatchPokemonClick = () => {\n        if (isSuccess()) {\n            setFormDialogOpen(true);\n            setSnackbarStatus({\n                open: true,\n                severity: \"success\",\n                message: `Congratulations you have caught ${pokemonName}`\n            })\n        } else {\n            setSnackbarStatus({\n                open: true,\n                severity: \"error\",\n                message: `Too bad! You did not caught ${pokemonName}`\n            })\n        }\n    };\n\n    const onChangeFormDialogTextField = (evt) =>\n        setFormDialogTextField(evt.target.value)\n\n    const onSubmitFormDialog = () => {\n        if(formDialogTextField !== '') {\n            if(!checkIfPokemonNicknameAlreadyExists(POKEMON_LOCAL_STORAGE_KEY, formDialogTextField)) {\n                console.log('abcabc', `${formDialogTextField} is saved to localhost`);\n                dispatch(catchPokemon(formDialogTextField, currentPokemon.name))\n                setFormDialogOpen(false);\n                history.goBack()\n            } else {\n                setSnackbarStatus({\n                    open: true,\n                    severity: \"error\",\n                    message: `Nickname already exists, please give another nickname`\n                })\n            }\n        }  \n    }\n\n    return (\n        <div className=\"Global-wrapper\" style={styles.pokemonDetailWrapper}>\n            <div className=\"Global-content\">\n                {!isEmpty(currentPokemon) ? (\n                    <div>\n                        <Image\n                            url={currentPokemon.sprites.front_default}\n                            alt={currentPokemon.name}\n                            style={styles.avatar}\n                        />\n                        <Typography\n                            label={pokemonName}\n                            variant={\"h3\"}\n                            style={styles.pokemonNameTitle}\n                        />\n                        <div style={styles.typesSection}>\n                            <Typography label={\"Types\"} variant={\"h4\"} />\n                            <List\n                                listItems={currentPokemon.types}\n                                labelSelector=\"name\"\n                            />\n                        </div>\n                        <div style={styles.movesSection}>\n                            <Typography label={\"Moves\"} variant={\"h4\"} />\n                            <List\n                                listItems={currentPokemon.moves}\n                                labelSelector=\"name\"\n                            />\n                        </div>\n                        <Button\n                            onClick={onCatchPokemonClick}\n                            style={styles.catchPokemonButton}\n                            label={`Catch ${pokemonName}`}\n                        />\n                    </div>\n                ) : null}\n\n                <FormDialog\n                    open={formDialogOpen}\n                    setOpen={setFormDialogOpen}\n                    dialogTitle=\"Set Nickname\"\n                    dialogSubTitle=\"Set nickname for your newly caught pokemon\"\n                    textFieldLabel=\"Nickname\"\n                    textFieldValue={formDialogTextField}\n                    textFieldOnChange={onChangeFormDialogTextField}\n                    dialogConfirmButtonLabel=\"Save Nickname\"\n                    onSubmit={onSubmitFormDialog}\n                />\n\n                <Snackbar\n                    snackbarStatus={snackbarStatus}\n                    autoHideDuration={5000}\n                    handleClose={setSnackbarStatus}\n                    variant=\"filled\"\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default PokemonDetail;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./containers/Home/Home\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ReduxPromise from \"redux-promise\";\nimport rootReducer from \"./reducers\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport {theme} from \"./utilities/theme.const\";\nimport PokemonDetail from \"./containers/PokemonDetail/PokemonDetail\";\n\nconst AppWrapper = () => {\n    const createStoreWithMiddleware = applyMiddleware(ReduxPromise)(\n        createStore\n    );\n\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <ThemeProvider theme={theme}>\n                <Provider store={createStoreWithMiddleware(rootReducer)}>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route exact path=\"/pokemon\" component={Home} />\n                        <Route exact path=\"/pokemon/:pokemonName\" component={PokemonDetail} />\n                    </Switch>\n                </Provider>\n            </ThemeProvider>\n        </BrowserRouter>\n    );\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppWrapper />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}