{"version":3,"sources":["components/BottomNavigation/BottomNavigation.jsx","components/Typography/Typography.jsx","components/Card/Card.jsx","components/Pagination/Pagination.jsx","utils/string.utils.js","utils/number.utils.js","actions/types.js","utils/check-if-empty.utils.js","actions/actions.js","containers/PokemonsList/PokemonsList.hook.js","containers/PokemonsList/PokemonsList.skeleton.jsx","containers/PokemonsList/PokemonsList.jsx","components/Image/Image.jsx","assets/pokeball-big.png","components/NothingToShow/NothingToShow.jsx","components/Button/Button.jsx","containers/MyPokemonList/MyPokemonList.hook.js","containers/MyPokemonList/MyPokemonList.jsx","containers/Home/Home.hook.js","containers/Home/Home.jsx","serviceWorker.js","utils/local-storage.utils.js","reducers/pokemon-reducer.js","reducers/index.js","utils/theme.const.js","components/FormDialog/FormDialog.jsx","components/List/List.jsx","components/Snackbar/Snackbar.jsx","containers/PokemonDetail/PokemonDetail.hook.js","utils/catch-probability.js","containers/PokemonDetail/PokemonDetail.skeleton.jsx","containers/PokemonDetail/PokemonDetail.jsx","index.js"],"names":["useBottomNavigationStyles","makeStyles","root","position","bottom","width","useBottomNavigationActionStyles","color","selected","BottomNavigation","actions","selectedAction","onChange","props","bottomNavigationStyles","bottomNavigationActionClasses","value","showLabels","classes","map","action","i","label","icon","data-testid","Typography","variant","attributes","useCardStyles","marginBottom","cursor","Card","labelVariant","subLabel","children","styles","separateContentAndButtons","cardActionsChildren","cardStyles","style","cardContent","Divider","divider","cardActions","usePaginationStyles","ul","justifyContent","Pagination","pages","paginationClasses","count","siblingCount","toTitleCase","str","replace","toLowerCase","m","toUpperCase","ceiling","valueToBeCalculated","Math","ceil","FETCH_POKEMONS_LIST","FETCH_POKEMON_DETAIL","FETCH_MY_POKEMONS","CATCH_POKEMON","RELEASE_MY_POKEMON","SET_CURRENT_POKEMONS_LIST_PAGE","SET_CURRENT_MY_POKEMONS_LIST_PAGE","SET_SELECTED_BOTTOM_ACTION","LOADING","isEmpty","dataToBeChecked","_isEmptyObject","object","length","Object","keys","some","element","ROOT_URL","fetchPokemonsList","params","a","url","additionalParams","key","join","request","axios","get","catch","error","response","type","types","payload","fetchPokemonDetail","pokemonName","setLoading","usePokemonsList","dispatch","useDispatch","history","useHistory","useState","currentlyDisplayedPokemonsList","setCurrentlyDisplayedPokemonsList","useSelector","state","allPokemonsList","PokemonReducer","pokemonsList","currentPokemonsListPage","pageOffset","pageLimit","allPokemonsCount","loading","useEffect","offset","limit","onChangePage","_","newPage","setCurrentPokemonsListPage","onPokemonClick","push","skeletonCard","PokemonsListSkeleton","Array","fill","Skeleton","height","content","maxWidth","minHeight","margin","backgroundColor","PokemonsList","pokemon","name","onClick","page","Image","src","image","display","paddingTop","textAlign","NothingToShow","Pokeball","Button","useMyPokemonList","currentlyDisplayedMyPokemonsList","setCurrentlyDisplayedMyPokemonsList","myPokemonsList","myPokemonsListCount","currentMyPokemonsListPage","pagesCount","slice","reduce","result","setCurrentMyPokemonsListPage","onReleasePokemon","pokemonNickname","releaseMyPokemon","paddingBottom","paddingLeft","float","releaseButton","borderColor","marginTop","MyPokemonList","size","evt","preventDefault","stopPropagation","useHome","onChangeBottomNavigationAction","newAction","selectedBottomAction","wrapper","Home","renderBottomTab","Boolean","window","location","hostname","match","POKEMON_LOCAL_STORAGE_KEY","getItemFromLocalStorage","localStorageKey","itemFromLocalStorage","localStorage","getItem","JSON","parse","setItemToLocalStorage","valueForLocalStorage","setItem","stringify","removeItemFromLocalStorage","removeItem","initialState","pokemonsListCount","currentPokemon","searchTerm","status","data","results","moves","move","myPokemons","pokemons","newMyPokemons","newPokemonsList","rootReducer","combineReducers","PRIMARY_COLOR","SECONDARY_COLOR","theme","createMuiTheme","palette","primary","main","secondary","FormDialog","open","dialogTitle","dialogSubTitle","textFieldLabel","textFieldOnChange","textFieldValue","dialogConfirmButtonLabel","onSubmit","autoFocus","fullWidth","inputProps","useListItemStyles","opacity","List","listItems","iconSelector","labelSelector","listItemStyles","listItem","Alert","elevation","Snackbar","snackbarStatus","autoHideDuration","handleClose","handleSnackbarClose","reason","onClose","severity","message","usePokemonDetail","setSnackbarStatus","formDialogOpen","setFormDialogOpen","formDialogTextField","setFormDialogTextField","pokemonNameFromSlug","onCatchPokemonClick","random","onChangeNicknameField","target","onSubmitNewNickname","checkIfPokemonNicknameAlreadyExists","catchPokemon","goBack","skeletonAvatar","padding","skeletonList","PokemonDetailSkeleton","pokemonDetailWrapper","avatar","typesSection","movesSection","maxHeight","overflow","pokemonNameTitle","catchPokemonButton","PokemonDetail","sprites","front_default","alt","setOpen","AppWrapper","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","basename","process","ThemeProvider","store","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0100d807.chunk.js","sourcesContent":["import React from \"react\";\nimport MuiBottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport MuiBottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useBottomNavigationStyles = makeStyles({\n  root: {\n\t\tposition: 'fixed',\n    bottom: 0,\n    width: '100%',\n  },\n});\n\nconst useBottomNavigationActionStyles = makeStyles({\n  root: {\n    \"&$selected\": {\n      color: \"#7D4CDB\",\n    },\n  },\n  selected: {\n    color: \"#7D4CDB\",\n  },\n});\n\n/**\n * BottomNavigation Component\n *\n * @since  16/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Array}  actions  Actions inside the bottom navigation for users to select which action\n * @param {Number}  selectedAction  The selected action in the form of index of the actions array\n * @param {Function}  onChange  onChange handler\n *\n */\n\nconst BottomNavigation = ({ actions, selectedAction, onChange, ...props }) => {\n\n\tconst bottomNavigationStyles = useBottomNavigationStyles();\n\tconst bottomNavigationActionClasses = useBottomNavigationActionStyles();\n\n  return (\n    <MuiBottomNavigation\n      value={selectedAction}\n      onChange={onChange}\n      showLabels\n      classes={bottomNavigationStyles}\n      {...props}\n    >\n      {actions.map((action, i) => {\n        return (\n          <MuiBottomNavigationAction\n            classes={bottomNavigationActionClasses}\n            key={i}\n            label={action.label}\n            icon={!!action.icon && action.icon}\n            data-testid={action.label}\n          />\n        );\n      })}\n    </MuiBottomNavigation>\n  );\n};\n\nexport default BottomNavigation;\n","import React from \"react\";\nimport MuiTypography from \"@material-ui/core/Typography\";\n\n/**\n * Typography Component\n *\n * @since  14/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {String}  label  Status of the snackbar including (Open/Close, severity and message)\n * @param {String}  variant  Valid variations of HTML text tags e.g. h1, h2, h3, p\n *\n */\n\nconst Typography = ({ label, variant, ...attributes }) => {\n  return (\n    <MuiTypography variant={variant} {...attributes}>\n      {label}\n    </MuiTypography>\n  );\n};\n\nexport default Typography;\n","import React from \"react\";\nimport MuiCard from \"@material-ui/core/Card\";\nimport MuiCardActions from \"@material-ui/core/CardActions\";\nimport MuiCardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"../Typography/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useCardStyles = makeStyles({\n  root: {\n    marginBottom: '1em',\n    cursor: 'pointer'\n  },\n});\n\n/**\n * Card Component\n *\n * @since  15/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {String}  label  Card label\n * @param {NUMBER}  labelVariant  Label HTML text tag variant e.g. h1, h2, h3, p\n * @param {ReactNode}  children  Children DOM node of the card\n * @param {Object}  styles  UYser defined styles\n * @param {Boolean}  separateContentAndButtons  Add a divider to separate content and buttons\n *\n */\n\nconst Card = ({\n  label,\n  labelVariant = \"h6\",\n  subLabel,\n  children,\n  styles = {},\n  separateContentAndButtons = false,\n  ...attributes\n}) => {\n\n\tconst cardActionsChildren = children;\n\tconst cardStyles = useCardStyles();\n\n  return (\n    <MuiCard classes={cardStyles} {...attributes}>\n      <MuiCardContent style={styles.cardContent}>\n        <Typography label={label} variant={labelVariant} data-testid=\"card-label\" />\n        {!!subLabel && <Typography label={subLabel} variant=\"subtitle2\" color=\"textSecondary\" data-testid=\"card-sub-label\" />}\n        {separateContentAndButtons && <Divider style={styles.divider} />}\n        {!!cardActionsChildren ? (\n          <MuiCardActions style={styles.cardActions}>\n            {cardActionsChildren}\n          </MuiCardActions>\n        ) : null}\n      </MuiCardContent>\n    </MuiCard>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport MuiPagination from \"@material-ui/lab/Pagination\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst usePaginationStyles = makeStyles({\n  ul: {\n    justifyContent: \"center\",\n  },\n});\n\n/**\n * Pagination Component\n *\n * @since  15/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Number}  pages  No of pages to be rendered by the Pagination component\n *\n */\n\nconst Pagination = ({ pages, ...attributes }) => {\n  const paginationClasses = usePaginationStyles();\n  return (\n    <MuiPagination\n      data-testid=\"pagination\"\n      classes={paginationClasses}\n      count={pages}\n      color=\"primary\"\n      siblingCount={1}\n      {...attributes}\n    />\n  );\n};\n\nexport default Pagination;\n","export const toTitleCase = (str) => {\n  if (!!str)\n    return str\n      .replace(/([^A-Z])([A-Z])/g, \"$1 $2\") // split cameCase\n      .replace(/[_\\-]+/g, \" \") // split snake_case and lisp-case\n      .toLowerCase()\n      .replace(/(^\\w|\\b\\w)/g, function (m) {\n        return m.toUpperCase();\n      }) // title case words\n      .replace(/\\s+/g, \" \") // collapse repeated whitespace\n      .replace(/^\\s+|\\s+$/, \"\"); // remove leading/trailing whitespace\n};\n","export const ceiling = (valueToBeCalculated) => {\n    return Math.ceil(valueToBeCalculated)\n}","export const FETCH_POKEMONS_LIST = 'FETCH_POKEMONS_LIST';\nexport const FETCH_POKEMON_DETAIL = 'FETCH_POKEMON_DETAIL';\nexport const FETCH_MY_POKEMONS = 'FETCH_MY_POKEMONS';\nexport const CATCH_POKEMON = 'CATCH_POKEMON';\nexport const RELEASE_MY_POKEMON = 'RELEASE_MY_POKEMON';\nexport const SET_CURRENT_POKEMONS_LIST_PAGE = 'SET_CURRENT_POKEMONS_LIST_PAGE';\nexport const SET_CURRENT_MY_POKEMONS_LIST_PAGE = 'SET_CURRENT_MY_POKEMONS_LIST_PAGE';\nexport const SET_SELECTED_BOTTOM_ACTION = 'SET_SELECTED_BOTTOM_ACTION';\nexport const LOADING = 'LOADING';","export const isEmpty = (dataToBeChecked) => {\n  return (\n    dataToBeChecked == false ||\n    typeof dataToBeChecked === \"undefined\" ||\n    dataToBeChecked == null ||\n    (typeof dataToBeChecked === \"object\" && _isEmptyObject(dataToBeChecked))\n  );\n};\n\nconst _isEmptyObject = (object) => {\n  if (typeof object.length === \"undefined\") {\n    // it's an Object, not an Array\n    var hasNonempty = Object.keys(object).some(function nonEmpty(element) {\n      return !isEmpty(object[element]);\n    });\n    return hasNonempty ? false : _isEmptyObject(Object.keys(object));\n  }\n\n  return !object.some(function nonEmpty(element) {\n    // check if array is really not empty as JS thinks\n    return !isEmpty(element); // at least one element should be non-empty\n  });\n};\n","import axios from \"axios\"; //import axios library for performing ajax request\nimport * as types from \"../actions/types\";\nimport { isEmpty } from \"../utils/check-if-empty.utils\";\n\nconst ROOT_URL = `https://pokeapi.co/api/v2`;\n\nexport const fetchPokemonsList = async (params) => {\n    let url = `${ROOT_URL}/pokemon`;\n    if (!isEmpty(params)) {\n        const additionalParams = Object.keys(params)\n            .map((key) => key + \"=\" + params[key])\n            .join(\"&\");\n        if (additionalParams) {\n            url += `?${additionalParams}`;\n        }\n    }\n    const request = axios.get(url).catch((error) => {\n        return error.response;\n    });\n    return {\n\t\ttype: types.FETCH_POKEMONS_LIST,\n\t\tpayload: request\n\t};\n};\n\nexport const fetchPokemonDetail = (pokemonName) => {\n\tlet url = `${ROOT_URL}/pokemon/${pokemonName}`;\n    const request = axios.get(url).catch((error) => {\n        return error.response;\n    });\n    return {\n\t\ttype: types.FETCH_POKEMON_DETAIL,\n\t\tpayload: request\n\t};;\n}\n\nexport const fetchMyPokemons = () => {\n\treturn {\n\t\ttype: types.FETCH_MY_POKEMONS,\n\t}\n}\n\nexport const catchPokemon = (pokemonNickname, pokemonName) => {\n\treturn {\n\t\ttype: types.CATCH_POKEMON,\n\t\tpayload: {pokemonNickname, pokemonName}\n\t}\n}\n\nexport const releaseMyPokemon = (pokemonNickname) => {\n\treturn {\n\t\ttype: types.RELEASE_MY_POKEMON,\n\t\tpayload: pokemonNickname\n\t}\n}\n\nexport const setCurrentPokemonsListPage = (newPage) => {\n\treturn {\n\t\ttype: types.SET_CURRENT_POKEMONS_LIST_PAGE,\n\t\tpayload: newPage\n\t}\n}\n\nexport const setCurrentMyPokemonsListPage = (newPage) => {\n\treturn {\n\t\ttype: types.SET_CURRENT_MY_POKEMONS_LIST_PAGE,\n\t\tpayload: newPage\n\t}\n}\n\nexport const setSelectedBottomAction = (bottomAction) => {\n\treturn {\n\t\ttype: types.SET_SELECTED_BOTTOM_ACTION,\n\t\tpayload: bottomAction\n\t}\n}\n\nexport const setLoading = () => {\n\treturn {\n\t\ttype: types.LOADING,\n\t}\n}","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {\r\n  fetchPokemonDetail,\r\n  fetchPokemonsList,\r\n  setCurrentPokemonsListPage,\r\n  setLoading,\r\n} from \"../../actions/actions\";\r\nimport { isEmpty } from \"../../utils/check-if-empty.utils\";\r\n\r\nconst usePokemonsList = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [\r\n    currentlyDisplayedPokemonsList,\r\n    setCurrentlyDisplayedPokemonsList,\r\n  ] = useState([]);\r\n\r\n  const {\r\n    allPokemonsList,\r\n    currentPokemonsListPage,\r\n    pageOffset,\r\n    pageLimit,\r\n    allPokemonsCount,\r\n    loading,\r\n  } = useSelector((state) => {\r\n    return {\r\n      allPokemonsList: state.PokemonReducer.pokemonsList,\r\n      currentPokemonsListPage: state.PokemonReducer.currentPokemonsListPage,\r\n      pageOffset: state.PokemonReducer.pageOffset,\r\n      pageLimit: state.PokemonReducer.pageLimit,\r\n      allPokemonsCount: state.PokemonReducer.allPokemonsCount,\r\n      loading: state.PokemonReducer.loading,\r\n    };\r\n  });\r\n\r\n  //   // To get the pokemons list from API in the first component mount\r\n  //   useEffect(() => {\r\n  //     dispatch(fetchPokemonsList({ offset: pageOffset, limit: pageLimit }));\r\n  //   }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(allPokemonsList[currentPokemonsListPage])) {\r\n      setCurrentlyDisplayedPokemonsList(\r\n        allPokemonsList[currentPokemonsListPage]\r\n      );\r\n    } else {\r\n      dispatch(setLoading());\r\n      dispatch(fetchPokemonsList({ offset: pageOffset, limit: pageLimit }));\r\n    }\r\n  }, [allPokemonsList]);\r\n\r\n  /* When the user changes page, it first checks if the pokemon data set for that page exists\r\n   * if not then, calls the API for the next data set\r\n   */\r\n  const onChangePage = (_, newPage) => {\r\n    dispatch(setCurrentPokemonsListPage(newPage));\r\n    if (isEmpty(allPokemonsList[newPage])) {\r\n      dispatch(setLoading());\r\n      dispatch(\r\n        fetchPokemonsList({\r\n          offset: (newPage - 1) * pageLimit,\r\n          limit: pageLimit,\r\n        })\r\n      );\r\n    } else {\r\n      setCurrentlyDisplayedPokemonsList(allPokemonsList[newPage]);\r\n    }\r\n  };\r\n\r\n  // On click event handler when the user clicks on a pokemon card\r\n  const onPokemonClick = (pokemonName) => {\r\n    dispatch(setLoading());\r\n    dispatch(fetchPokemonDetail(pokemonName));\r\n    history.push(`/pokemon/${pokemonName}`);\r\n  };\r\n\r\n  return {\r\n    currentlyDisplayedPokemonsList,\r\n    setCurrentlyDisplayedPokemonsList,\r\n    allPokemonsList,\r\n    currentPokemonsListPage,\r\n    pageOffset,\r\n    pageLimit,\r\n    allPokemonsCount,\r\n    onChangePage,\r\n    onPokemonClick,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport default usePokemonsList;\r\n","import React from \"react\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nconst styles = {\r\n  skeletonCard: {\r\n    marginBottom: \"1em\",\r\n  },\r\n};\r\n\r\nconst PokemonsListSkeleton = () => {\r\n  return (\r\n    <>\r\n      {Array(20)\r\n        .fill()\r\n        .map((_, i) => {\r\n          return (\r\n            <Skeleton\r\n              style={styles.skeletonCard}\r\n              key={i}\r\n              variant=\"rect\"\r\n              width=\"100%\"\r\n              height={72}\r\n            />\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PokemonsListSkeleton;\r\n","import React from \"react\";\nimport Card from \"../../components/Card/Card\";\nimport Pagination from \"../../components/Pagination/Pagination\";\n\nimport { toTitleCase } from \"../../utils/string.utils\";\nimport { ceiling } from \"../../utils/number.utils\";\nimport usePokemonsList from \"./PokemonsList.hook\";\nimport PokemonsListSkeleton from \"./PokemonsList.skeleton\";\n\nconst styles = {\n  content: {\n    maxWidth: 400,\n    minHeight:\n      \"calc(100vh - 60px)\" /* margin of global wrapper to take into account bottom navigation */,\n    margin: \"0 auto\",\n    backgroundColor: \"#f9f9fb\",\n  },\n};\n\nconst PokemonsList = () => {\n  const {\n    currentlyDisplayedPokemonsList,\n    currentPokemonsListPage,\n    pageLimit,\n    allPokemonsCount,\n    onChangePage,\n    onPokemonClick,\n    loading,\n  } = usePokemonsList();\n\n  return (\n    <div style={styles.content}>\n      {!loading ? (\n        <>\n          {currentlyDisplayedPokemonsList.map((pokemon) => {\n            return (\n              <Card\n                label={toTitleCase(pokemon.name)}\n                labelVariant=\"h6\"\n                onClick={() => onPokemonClick(pokemon.name)}\n              />\n            );\n          })}\n          <Pagination\n            onChange={onChangePage}\n            page={currentPokemonsListPage}\n            pages={ceiling(allPokemonsCount / pageLimit)}\n          />\n        </>\n      ) : (\n        <PokemonsListSkeleton />\n      )}\n    </div>\n  );\n};\n\nexport default PokemonsList;\n","import React from \"react\";\nimport MuiAvatar from \"@material-ui/core/Avatar\";\n\n/**\n * Image Component\n *\n * @since  16/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {String}  url the url or location of the image\n *\n */\n\nconst Image = ({ url, ...attributes }) => {\n  return <MuiAvatar data-testid=\"image\" src={url} {...attributes} />;\n};\n\nexport default Image;\n","export default __webpack_public_path__ + \"static/media/pokeball-big.c95b8da7.png\";","import React from \"react\";\r\nimport Image from \"../Image/Image\";\r\nimport Typography from \"../Typography/Typography\";\r\n\r\nimport Pokeball from \"../../assets/pokeball-big.png\";\r\n\r\nconst styles = {\r\n  image: {\r\n    height: 100,\r\n    width: 100,\r\n    display: \"block\",\r\n    margin: \"auto\",\r\n    paddingTop: \"50%\",\r\n  },\r\n  label: {\r\n    display: \"block\",\r\n    textAlign: \"center\",\r\n    margin: \"1em\",\r\n  },\r\n};\r\n\r\n/**\r\n * NothingToShow Component\r\n *\r\n * @since  19/11/2020\r\n * @access (public)\r\n *\r\n * @type     Functional Component\r\n * @param {Object}  label  the label to be rendered in the middle of the page\r\n *\r\n */\r\n\r\nconst NothingToShow = ({ label }) => {\r\n  return (\r\n    <div data-testid=\"nothing-to-show\">\r\n      <Image src={Pokeball} variant=\"square\" style={styles.image} />\r\n      <Typography\r\n        variant=\"p\"\r\n        color=\"textSecondary\"\r\n        label={label}\r\n        style={styles.label}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NothingToShow;\r\n","import React from \"react\";\nimport MuiButton from \"@material-ui/core/Button\";\n\n/**\n * Button Component\n *\n * @since  14/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {String}  label  Label of the button\n * @param {String}  variant  variations of the button (text, outlined, filled)\n *\n */\n\nconst Button = ({ label, variant = \"outlined\", ...attributes }) => {\n  return (\n    <MuiButton data-testid=\"button\" variant={variant} color=\"primary\" {...attributes}>\n      {label}\n    </MuiButton>\n  );\n};\n\nexport default Button;\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  fetchMyPokemons,\r\n  fetchPokemonDetail,\r\n  releaseMyPokemon,\r\n  setCurrentMyPokemonsListPage,\r\n  setLoading,\r\n} from \"../../actions/actions\";\r\nimport { ceiling } from \"../../utils/number.utils\";\r\n\r\nconst useMyPokemonList = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [\r\n    currentlyDisplayedMyPokemonsList,\r\n    setCurrentlyDisplayedMyPokemonsList,\r\n\t] = useState([]);\r\n\t\r\n  const {\r\n    myPokemonsList,\r\n    myPokemonsListCount,\r\n    currentMyPokemonsListPage,\r\n    pageLimit,\r\n  } = useSelector((state) => {\r\n    return {\r\n      myPokemonsList: state.PokemonReducer.myPokemonsList,\r\n      myPokemonsListCount: state.PokemonReducer.myPokemonsListCount,\r\n      currentMyPokemonsListPage: state.PokemonReducer.currentMyPokemonsListPage,\r\n      pageLimit: state.PokemonReducer.pageLimit,\r\n    };\r\n\t});\r\n\t\r\n\tconst pagesCount = ceiling(myPokemonsListCount / pageLimit);\r\n\r\n\r\n  // Get the user's pokemons list and divide them into per page\r\n  useEffect(() => {\r\n    dispatch(fetchMyPokemons());\r\n    setCurrentlyDisplayedMyPokemonsList(\r\n      Object.keys(myPokemonsList)\r\n        .slice(0, pageLimit)\r\n        .reduce((result, key) => {\r\n          result[key] = myPokemonsList[key];\r\n          return result;\r\n        }, {})\r\n    );\r\n  }, []);\r\n\r\n  // Get the next set of pokemons when user changes page\r\n  useEffect(() => {\r\n    setCurrentlyDisplayedMyPokemonsList(\r\n      Object.keys(myPokemonsList)\r\n        .slice(\r\n          (currentMyPokemonsListPage - 1) * pageLimit,\r\n          (currentMyPokemonsListPage - 1) * pageLimit + pageLimit\r\n        )\r\n        .reduce((result, key) => {\r\n          result[key] = myPokemonsList[key];\r\n          return result;\r\n        }, {})\r\n    );\r\n  }, [currentMyPokemonsListPage, myPokemonsList]);\r\n\r\n  // On click event handler when the user clicks on a pokemon card\r\n  const onPokemonClick = (pokemonName) => {\r\n    dispatch(setLoading());\r\n    dispatch(fetchPokemonDetail(pokemonName));\r\n    history.push(`/pokemon/${pokemonName}`);\r\n  };\r\n\r\n  // On click event handler when the user changes the page\r\n  const onChangePage = (_, newPage) =>\r\n    dispatch(setCurrentMyPokemonsListPage(newPage));\r\n\r\n  // On click event handler when the user clicks on the release pokemon button\r\n  const onReleasePokemon = (pokemonNickname) =>\r\n\t\tdispatch(releaseMyPokemon(pokemonNickname));\r\n\t\t\r\n\r\n  return {\r\n\t\tcurrentlyDisplayedMyPokemonsList,\r\n\t\tmyPokemonsList,\r\n    myPokemonsListCount,\r\n    currentMyPokemonsListPage,\r\n\t\tpageLimit,\r\n\t\tpagesCount,\r\n\t\tonPokemonClick,\r\n\t\tonChangePage,\r\n\t\tonReleasePokemon,\r\n\t};\r\n};\r\n\r\nexport default useMyPokemonList;","import React from \"react\";\n\nimport Card from \"../../components/Card/Card\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport NothingToShow from \"../../components/NothingToShow/NothingToShow\";\n\nimport Button from \"../../components/Button/Button\";\nimport { isEmpty } from \"../../utils/check-if-empty.utils\";\nimport { toTitleCase } from \"../../utils/string.utils\";\nimport useMyPokemonList from \"./MyPokemonList.hook\";\n\nconst styles = {\n  content: {\n    maxWidth: 400,\n    minHeight:\n      \"calc(100vh - 60px)\" /* margin of global wrapper to take into account bottom navigation */,\n    margin: \"0 auto\",\n    backgroundColor: \"#f9f9fb\",\n  },\n  cardContent: {\n    paddingBottom: 0,\n  },\n  cardActions: {\n    paddingLeft: 0,\n    float: \"right\",\n  },\n  releaseButton: {\n    color: \"#f44336\",\n    borderColor: \"#f44336\",\n  },\n  divider: {\n    marginTop: 20,\n  },\n};\n\nconst MyPokemonList = () => {\n\n  const {\n    currentlyDisplayedMyPokemonsList,\n    myPokemonsList,\n    currentMyPokemonsListPage,\n    pagesCount,\n    onPokemonClick,\n    onChangePage,\n    onReleasePokemon,\n  } = useMyPokemonList();\n\n  return (\n    <div style={styles.content}>\n      {!isEmpty(currentlyDisplayedMyPokemonsList) ? (\n        <div>\n          {Object.keys(currentlyDisplayedMyPokemonsList).map(\n            (pokemonNickname) => {\n              const pokemonName = myPokemonsList[pokemonNickname];\n              return (\n                <Card\n                  key={pokemonNickname}\n                  label={pokemonNickname}\n                  labelVariant=\"h6\"\n                  subLabel={toTitleCase(pokemonName)}\n                  onClick={() => onPokemonClick(pokemonName)}\n                  styles={styles}\n                  separateContentAndButtons\n                >\n                  <Button\n                    size=\"small\"\n                    label=\"Release\"\n                    style={styles.releaseButton}\n                    onClick={(evt) => {\n                      evt.preventDefault();\n                      evt.stopPropagation();\n                      onReleasePokemon(pokemonNickname);\n                    }}\n                  />\n                </Card>\n              );\n            }\n          )}\n          <Pagination\n            onChange={onChangePage}\n            page={currentMyPokemonsListPage}\n            pages={pagesCount}\n          />\n        </div>\n      ) : (\n        <NothingToShow label={\"Sorry, you have not caught any pokemon yet\"} />\n      )}\n    </div>\n  );\n};\n\nexport default MyPokemonList;\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { setSelectedBottomAction } from \"../../actions/actions\";\r\n\r\n\r\nconst useHome = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const selectedBottomAction = useSelector((state) => {\r\n    return state.PokemonReducer.selectedBottomAction;\r\n  });\r\n\r\n  const onChangeBottomNavigationAction = (_, newAction) => {\r\n    dispatch(setSelectedBottomAction(newAction))\r\n  }\r\n\r\n  return {\r\n    onChangeBottomNavigationAction,\r\n    selectedBottomAction\r\n  }\r\n}\r\n\r\nexport default useHome;","import React from \"react\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport BottomNavigation from \"../../components/BottomNavigation/BottomNavigation\";\nimport PokemonsList from \"../PokemonsList/PokemonsList\";\nimport MyPokemonList from \"../MyPokemonList/MyPokemonList\";\nimport useHome from \"./Home.hook\";\n\n\nconst styles = {\n  wrapper: {\n    backgroundColor: \"#eaeaea\",\n    margin: \"0 0 60px 0\",\n  },\n\n  content: {\n    maxWidth: 400,\n    minHeight:\n      \"calc(100vh - 60px)\" /* margin of global wrapper to take into account bottom navigation */,\n    margin: \"0 auto\",\n    backgroundColor: \"#f9f9fb\",\n  },\n};\n\nconst Home = () => {\n  const { onChangeBottomNavigationAction, selectedBottomAction } = useHome();\n\n  // Render the bottom navigation\n  const renderBottomTab = () => {\n    switch (selectedBottomAction) {\n      case 0:\n        return <PokemonsList />;\n      case 1:\n        return <MyPokemonList />;\n      default:\n        return <PokemonsList />;\n    }\n  };\n\n  return (\n    <div style={styles.wrapper}>\n      {renderBottomTab()}\n      <BottomNavigation\n        selectedAction={selectedBottomAction}\n        onChange={onChangeBottomNavigationAction}\n        actions={[\n          { label: \"Pokemons List\", icon: <ListIcon /> },\n          { label: \"My Pokemons\", icon: <FavoriteIcon /> },\n        ]}\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { isEmpty } from \"./check-if-empty.utils\";\n\nexport const POKEMON_LOCAL_STORAGE_KEY = 'MY_POKEMONS';\n\nexport const getItemFromLocalStorage = (localStorageKey) => {\n    const itemFromLocalStorage = localStorage.getItem(localStorageKey);\n    if (!isEmpty(itemFromLocalStorage)) {\n        return JSON.parse(itemFromLocalStorage);\n    }\n    return null;\n};\n\nexport const setItemToLocalStorage = (localStorageKey, valueForLocalStorage) =>\n    localStorage.setItem(localStorageKey, JSON.stringify(valueForLocalStorage));\n\nexport const removeItemFromLocalStorage = (localStorageKey) =>\n    localStorage.removeItem(localStorageKey);\n\nexport const checkIfPokemonNicknameAlreadyExists = (localStorageKey, pokemonNickname) => {\n    const myPokemons = getItemFromLocalStorage(localStorageKey);\n    if(!isEmpty(myPokemons) && myPokemons.pokemons[pokemonNickname]) {\n        return true;\n    }\n    return false;\n}","import * as types from \"../actions/types\";\nimport { isEmpty } from \"../utils/check-if-empty.utils\";\nimport {\n  getItemFromLocalStorage,\n  POKEMON_LOCAL_STORAGE_KEY,\n  removeItemFromLocalStorage,\n  setItemToLocalStorage,\n} from \"../utils/local-storage.utils\";\n\nconst initialState = {\n  pokemonsListCount: null,\n  pokemonsList: [],\n  currentPokemon: null,\n  myPokemonsList: {},\n  searchTerm: \"\",\n  myPokemonsListCount: null,\n  pageOffset: 0,\n  pageLimit: 20,\n  currentPokemonsListPage: 1,\n  currentMyPokemonsListPage: 1,\n  selectedBottomAction: 0, // the index of the bottom action used by the Material-UI library to determine which destination is rendered\n  loading: false\n};\n\nfunction PokemonReducer(state = initialState, action) {\n  switch (action.type) {\n    case types.FETCH_POKEMONS_LIST: {\n      if (action.payload.status === 200) {\n        return {\n          ...state,\n          pokemonsList: {\n            ...state.pokemonsList,\n            [state.currentPokemonsListPage]: action.payload.data.results,\n          },\n          allPokemonsCount: action.payload.data.count,\n          pageOffset: (state.currentPokemonsListPage - 1) * state.pageLimit,\n          loading: false,\n        };\n      }\n    }\n    case types.FETCH_POKEMON_DETAIL: {\n      if (action.payload.status === 200) {\n        return {\n          ...state,\n          currentPokemon: {\n            ...action.payload.data,\n            types: action.payload.data.types.map((type) => type.type),\n            moves: action.payload.data.moves.map((move) => move.move),\n          },\n          loading: false,\n        };\n      }\n    }\n    case types.FETCH_MY_POKEMONS: {\n      let myPokemons = getItemFromLocalStorage(POKEMON_LOCAL_STORAGE_KEY);\n      if (isEmpty(myPokemons)) {\n        return {\n          ...state,\n          myPokemonsList: {},\n          myPokemonsListCount: 0,\n        };\n      }\n      return {\n        ...state,\n        myPokemonsList: myPokemons.pokemons,\n        myPokemonsListCount: myPokemons.count,\n      };\n    }\n    case types.RELEASE_MY_POKEMON: {\n      const pokemonNickname = action.payload;\n      const myPokemons = getItemFromLocalStorage(POKEMON_LOCAL_STORAGE_KEY);\n      if (myPokemons.pokemons[pokemonNickname]) {\n        // Check if the pokemon deleted is the last one\n        if (myPokemons.count === 1) {\n          removeItemFromLocalStorage(POKEMON_LOCAL_STORAGE_KEY);\n          return {\n            ...state,\n            myPokemonsList: {},\n          };\n        } else {\n          // Delete the pokemon and lower the total pokemon count\n          const {\n            [pokemonNickname]: nickname,\n            ...newMyPokemons\n          } = myPokemons.pokemons;\n          myPokemons.count -= 1;\n          setItemToLocalStorage(POKEMON_LOCAL_STORAGE_KEY, {\n            count: myPokemons.count,\n            pokemons: newMyPokemons,\n          });\n          return {\n            ...state,\n            myPokemonsList: newMyPokemons,\n          };\n        }\n      }\n      return {\n        ...state,\n        myPokemonsList: myPokemons,\n      };\n    }\n    case types.CATCH_POKEMON: {\n      let newPokemonsList;\n      const { pokemonNickname, pokemonName } = action.payload;\n      const myPokemons = getItemFromLocalStorage(POKEMON_LOCAL_STORAGE_KEY);\n\n      if (!isEmpty(myPokemons)) {\n        // Check if there is existing pokemon\n        newPokemonsList = {\n          count: myPokemons.count + 1,\n          pokemons: {\n            ...myPokemons.pokemons,\n            [pokemonNickname]: pokemonName,\n          },\n        };\n      } else {\n        // Add the pokemon to localStorage and increment the pokemon count\n        newPokemonsList = {\n          count: 1,\n          pokemons: { [pokemonNickname]: pokemonName },\n        };\n      }\n\n      setItemToLocalStorage(POKEMON_LOCAL_STORAGE_KEY, newPokemonsList);\n      return {\n        ...state,\n        myPokemonsList: newPokemonsList,\n      };\n    }\n    case types.SET_CURRENT_POKEMONS_LIST_PAGE: {\n      const newPage = action.payload;\n      return {\n        ...state,\n        currentPokemonsListPage: newPage,\n      };\n    }\n    case types.SET_CURRENT_MY_POKEMONS_LIST_PAGE: {\n      const newPage = action.payload;\n      return {\n        ...state,\n        currentMyPokemonsListPage: newPage,\n      };\n    }\n    case types.SET_SELECTED_BOTTOM_ACTION: {\n      const selectedBottomAction = action.payload;\n      return {\n        ...state,\n        selectedBottomAction,\n      };\n    }\n    case types.LOADING: {\n      return {\n        ...state,\n        loading: true\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default PokemonReducer;\n","import { combineReducers } from 'redux';\nimport PokemonReducer from './pokemon-reducer';\n\nconst rootReducer = combineReducers({\n    PokemonReducer\n});\n\nexport default rootReducer;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const PRIMARY_COLOR = '#7D4CDB';\nexport const SECONDARY_COLOR = '#11CB5F';\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: PRIMARY_COLOR,\n        },\n        secondary: {\n            // This is green.A700 as hex.\n            main: SECONDARY_COLOR,\n        },\n    },\n});\n","import React from \"react\";\nimport MuiTextField from \"@material-ui/core/TextField\";\nimport MuiDialog from \"@material-ui/core/Dialog\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogContentText from \"@material-ui/core/DialogContentText\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\n\nimport Button from \"../Button/Button\";\n\n/**\n * FormDialog Component\n *\n * @since  16/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Boolean}  open  Status of the dialog box to be opened or closed\n * @param {String}  dialogTitle  The dialog box title\n * @param {String}  dialogSubTitle  The dialog box subtitle\n * @param {String}  textFieldLabel  The text field label inside the dialog box\n * @param {String}  textFieldValue  The text field value inside the dialog box\n * @param {Function}  textFieldOnChange  On change event handler for text field component\n * @param {String}  dialogConfirmButtonLabel  The label of the confirm button inside the dialog box\n * @param {Function}  onSubmit  On submit function if the user clicks the button inside the dialog box\n *\n */\n\nconst FormDialog = ({\n  open,\n  dialogTitle,\n  dialogSubTitle,\n  textFieldLabel,\n  textFieldValue,\n  textFieldOnChange,\n  dialogConfirmButtonLabel,\n  onSubmit,\n}) => {\n  return (\n    <MuiDialog open={open}>\n      <MuiDialogTitle data-testid=\"dialog-title\">{dialogTitle}</MuiDialogTitle>\n      <MuiDialogContent>\n        <MuiDialogContentText data-testid=\"dialog-subtitle\">{dialogSubTitle}</MuiDialogContentText>\n        <MuiTextField\n          autoFocus\n          margin=\"dense\"\n          label={textFieldLabel}\n          type=\"text\"\n          fullWidth\n          // value={textFieldValue}\n          onChange={textFieldOnChange}\n          inputProps={{'data-testid': \"dialog-text-field\"}}\n        />\n      </MuiDialogContent>\n      <MuiDialogActions>\n        <Button\n          variant=\"text\"\n          onClick={onSubmit}\n          color=\"primary\"\n          label={dialogConfirmButtonLabel}\n        />\n      </MuiDialogActions>\n    </MuiDialog>\n  );\n};\n\nexport default FormDialog;\n","import React from \"react\";\nimport MuiList from \"@material-ui/core/List\";\nimport MuiListItem from \"@material-ui/core/ListItem\";\nimport MuiListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport MuiListItemText from \"@material-ui/core/ListItemText\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { isEmpty } from \"../../utils/check-if-empty.utils\";\nimport { toTitleCase } from \"../../utils/string.utils\";\nimport { PRIMARY_COLOR } from \"../../utils/theme.const\";\n\nconst useListItemStyles = makeStyles({\n  root: {\n    backgroundColor: PRIMARY_COLOR,\n    color: \"#ffffff\",\n    opacity: 0.75,\n  },\n});\n\n/**\n * List Component\n *\n * @since  15/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Array}  listItems  Items to be rendered by the list\n * @param {NUMBER}  iconSelector  the key selector of each item object to get the icon for that particular item\n * @param {Function}  labelSelector  the key selector of each item object to get the label for that particular item\n *\n */\n\nconst List = ({\n  listItems,\n  iconSelector = \"icon\",\n  labelSelector = \"label\",\n}) => {\n  const listItemStyles = useListItemStyles();\n\n  return (\n    <MuiList>\n      {listItems.map((listItem, i) => {\n        return (\n          <MuiListItem key={i} classes={listItemStyles} divider>\n            {!isEmpty(listItem[iconSelector]) && (\n              <MuiListItemIcon>{listItem[iconSelector]}</MuiListItemIcon>\n            )}\n            <MuiListItemText data-testid={listItem[labelSelector]} primary={toTitleCase(listItem[labelSelector])} />\n          </MuiListItem>\n        );\n      })}\n    </MuiList>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport MuiSnackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} {...props} />;\n}\n\n/**\n * Snackbar Component\n *\n * @since  17/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Object}  snackbarStatus  Status of the snackbar including (Open/Close, severity and message)\n * @param {NUMBER}  autoHideDuration  the duration until the Snackbar Component disappears\n * @param {Function}  handleClose  onChange handler\n * @param {String}  variant  Predefined styles from Material-UI for the Snackbar Component\n *\n */\nconst Snackbar = ({\n  snackbarStatus,\n  autoHideDuration,\n  handleClose,\n  variant = \"filled\",\n  ...attributes\n}) => {\n  const handleSnackbarClose = (_, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    handleClose({ ...snackbarStatus, open: false });\n\t};\n\t\n  return (\n    <MuiSnackbar\n      open={snackbarStatus.open}\n      autoHideDuration={autoHideDuration}\n      onClose={handleSnackbarClose}\n      data-testid={'snackbar'}\n      {...attributes}\n    >\n      <Alert\n        onClose={handleSnackbarClose}\n        severity={snackbarStatus.severity}\n        variant={variant}\n      >\n        {snackbarStatus.message}\n      </Alert>\n    </MuiSnackbar>\n  );\n};\n\nexport default Snackbar;\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {\r\n  catchPokemon,\r\n  fetchPokemonDetail,\r\n  setLoading,\r\n} from \"../../actions/actions\";\r\nimport { isEmpty } from \"../../utils/check-if-empty.utils\";\r\nimport { toTitleCase } from \"../../utils/string.utils\";\r\nimport {\r\n  checkIfPokemonNicknameAlreadyExists,\r\n  POKEMON_LOCAL_STORAGE_KEY,\r\n} from \"../../utils/local-storage.utils\";\r\nimport { isSuccess } from \"../../utils/catch-probability\";\r\n\r\nimport { PRIMARY_COLOR, SECONDARY_COLOR } from \"../../utils/theme.const\";\r\n\r\nconst usePokemonDetail = (match) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [snackbarStatus, setSnackbarStatus] = useState({\r\n    open: false,\r\n    severity: \"\",\r\n    message: \"\",\r\n  });\r\n  const [formDialogOpen, setFormDialogOpen] = useState(false);\r\n  const [formDialogTextField, setFormDialogTextField] = useState(\"\");\r\n\r\n  const { currentPokemon, loading } = useSelector((state) => {\r\n    return {\r\n      currentPokemon: state.PokemonReducer.currentPokemon,\r\n      loading: state.PokemonReducer.loading,\r\n    };\r\n  });\r\n\r\n  const pokemonNameFromSlug = match.params.pokemonName;\r\n  const pokemonName = !isEmpty(currentPokemon)\r\n    ? toTitleCase(currentPokemon.name)\r\n    : \"-\";\r\n\r\n  // Get the pokemon render when this component first mounted\r\n  useEffect(() => {\r\n    if (isEmpty(currentPokemon)) {\r\n      dispatch(setLoading());\r\n      dispatch(fetchPokemonDetail(pokemonNameFromSlug));\r\n    }\r\n  }, []);\r\n\r\n  // On click handler when the Catch Pokemon button is clicked\r\n  const onCatchPokemonClick = () => {\r\n    if (isSuccess()) {\r\n      setFormDialogOpen(true);\r\n      setSnackbarStatus({\r\n        open: true,\r\n        severity: \"success\",\r\n        message: `Congratulations you have caught ${pokemonName}`,\r\n      });\r\n    } else {\r\n      setSnackbarStatus({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: `Too bad! You did not caught ${pokemonName}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Change the nickname of the pokemon\r\n  const onChangeNicknameField = (evt) =>\r\n    setFormDialogTextField(evt.target.value);\r\n\r\n  // On submit handler when the user clicked on the Submit button in the form dialog\r\n  const onSubmitNewNickname = () => {\r\n    if (formDialogTextField !== \"\") {\r\n      if (\r\n        !checkIfPokemonNicknameAlreadyExists(\r\n          POKEMON_LOCAL_STORAGE_KEY,\r\n          formDialogTextField\r\n        )\r\n      ) {\r\n        dispatch(catchPokemon(formDialogTextField, currentPokemon.name));\r\n        setFormDialogOpen(false);\r\n        history.goBack();\r\n      } else {\r\n        setSnackbarStatus({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: `Nickname already exists, please give another nickname`,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    snackbarStatus,\r\n    setSnackbarStatus,\r\n    formDialogOpen,\r\n    setFormDialogOpen,\r\n    formDialogTextField,\r\n    setFormDialogTextField,\r\n    currentPokemon,\r\n    pokemonNameFromSlug,\r\n    pokemonName,\r\n    onCatchPokemonClick,\r\n    onChangeNicknameField,\r\n    onSubmitNewNickname,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport default usePokemonDetail;\r\n","export const isSuccess = () => Math.random() < 0.5;","import React from \"react\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nconst styles = {\r\n    skeletonAvatar: {\r\n        margin: '0 auto',\r\n        padding: '0.5em'\r\n    },\r\n    skeletonList: {\r\n        margin: '1em',\r\n    }\r\n}\r\n\r\nconst PokemonDetailSkeleton = () => {\r\n    return (\r\n        <>\r\n        <Skeleton style={styles.skeletonAvatar} variant=\"circle\" width={120} height={120} />\r\n        <Skeleton variant=\"text\" />\r\n        <Skeleton style={styles.skeletonList} variant=\"rect\" height={150} />\r\n        <Skeleton style={styles.skeletonList} variant=\"rect\" height={500} />\r\n        <Skeleton variant=\"rect\" width=\"100%\" height={36} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PokemonDetailSkeleton;","import React from \"react\";\n\nimport Button from \"../../components/Button/Button\";\nimport FormDialog from \"../../components/FormDialog/FormDialog\";\nimport Image from \"../../components/Image/Image\";\nimport List from \"../../components/List/List\";\nimport Snackbar from \"../../components/Snackbar/Snackbar\";\nimport Typography from \"../../components/Typography/Typography\";\n\nimport { isEmpty } from \"../../utils/check-if-empty.utils\";\n\nimport { PRIMARY_COLOR, SECONDARY_COLOR } from \"../../utils/theme.const\";\nimport usePokemonDetail from \"./PokemonDetail.hook\";\nimport PokemonDetailSkeleton from \"./PokemonDetail.skeleton\";\n\nconst styles = {\n  wrapper: {\n    backgroundColor: \"#eaeaea\",\n    margin: \"0\",\n  },\n  content: {\n    maxWidth: 400,\n    minHeight: \"100vh\",\n    margin: \"0 auto\",\n    backgroundColor: \"#f9f9fb\",\n  },\n  pokemonDetailWrapper: {\n    marginBottom: 0,\n  },\n  avatar: {\n    margin: \"0 auto\",\n    width: 120,\n    height: 120,\n    backgroundColor: SECONDARY_COLOR,\n    padding: \"0.5em\",\n    opacity: 0.75,\n  },\n  typesSection: {\n    margin: \"1em\",\n  },\n  movesSection: {\n    margin: \"1em\",\n    maxHeight: 500,\n    overflow: \"auto\",\n  },\n  pokemonNameTitle: { textAlign: \"center\", color: PRIMARY_COLOR },\n  catchPokemonButton: {\n    display: \"block\",\n    width: \"95%\",\n    margin: \"0 auto\",\n  },\n};\n\nconst PokemonDetail = ({ match }) => {\n  const {\n    snackbarStatus,\n    setSnackbarStatus,\n    formDialogOpen,\n    setFormDialogOpen,\n    formDialogTextField,\n    currentPokemon,\n    pokemonName,\n    onCatchPokemonClick,\n    onChangeNicknameField,\n    onSubmitNewNickname,\n    loading,\n  } = usePokemonDetail(match);\n\n  return (\n    <div style={styles.wrapper}>\n      <div style={styles.content}>\n        {!loading ? (\n          <>\n            {!isEmpty(currentPokemon) && (\n              <div>\n                <Image\n                  url={currentPokemon.sprites.front_default}\n                  alt={currentPokemon.name}\n                  style={styles.avatar}\n                />\n                <Typography\n                  label={pokemonName}\n                  variant={\"h3\"}\n                  style={styles.pokemonNameTitle}\n                />\n                <div style={styles.typesSection}>\n                  <Typography label={\"Types\"} variant={\"h4\"} />\n                  <List listItems={currentPokemon.types} labelSelector=\"name\" />\n                </div>\n                <div style={styles.movesSection}>\n                  <Typography label={\"Moves\"} variant={\"h4\"} />\n                  <List listItems={currentPokemon.moves} labelSelector=\"name\" />\n                </div>\n                <Button\n                  onClick={onCatchPokemonClick}\n                  style={styles.catchPokemonButton}\n                  label={`Catch ${pokemonName}`}\n                />\n              </div>\n            )}\n          </>\n        ) : (\n          <PokemonDetailSkeleton />\n        )}\n        <FormDialog\n          open={formDialogOpen}\n          setOpen={setFormDialogOpen}\n          dialogTitle=\"Set Nickname\"\n          dialogSubTitle=\"Set nickname for your newly caught pokemon\"\n          textFieldLabel=\"Nickname\"\n          textFieldValue={formDialogTextField}\n          textFieldOnChange={onChangeNicknameField}\n          dialogConfirmButtonLabel=\"Save Nickname\"\n          onSubmit={onSubmitNewNickname}\n        />\n\n        <Snackbar\n          snackbarStatus={snackbarStatus}\n          autoHideDuration={5000}\n          handleClose={setSnackbarStatus}\n          variant=\"filled\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PokemonDetail;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./containers/Home/Home\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ReduxPromise from \"redux-promise\";\nimport rootReducer from \"./reducers\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport {theme} from \"./utils/theme.const\";\nimport PokemonDetail from \"./containers/PokemonDetail/PokemonDetail\";\n\nconst AppWrapper = () => {\n    const createStoreWithMiddleware = applyMiddleware(ReduxPromise)(\n        createStore\n    );\n\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <ThemeProvider theme={theme}>\n                <Provider store={createStoreWithMiddleware(rootReducer)}>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route exact path=\"/pokemon\" component={Home} />\n                        <Route exact path=\"/pokemon/:pokemonName\" component={PokemonDetail} />\n                    </Switch>\n                </Provider>\n            </ThemeProvider>\n        </BrowserRouter>\n    );\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppWrapper />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}