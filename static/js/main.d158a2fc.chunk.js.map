{"version":3,"sources":["components/BottomNavigation/BottomNavigation.jsx","components/Typography/Typography.jsx","components/Card/Card.jsx","components/Pagination/Pagination.jsx","actions/types.js","utilities/check-if-empty.utils.js","actions/actions.js","utilities/string.utils.js","utilities/number.utils.js","containers/PokemonsList/PokemonsList.jsx","components/Image/Image.jsx","assets/pokeball-big.png","components/NothingToShow/NothingToShow.jsx","components/Button/Button.jsx","containers/MyPokemonList/MyPokemonList.jsx","containers/Home/Home.jsx","serviceWorker.js","utilities/local-storage.utils.js","reducers/pokemon-reducer.js","reducers/index.js","utilities/theme.const.js","components/FormDialog/FormDialog.jsx","components/List/List.jsx","components/Snackbar/Snackbar.jsx","containers/PokemonDetail/PokemonDetail.jsx","utilities/catch-probability.js","index.js"],"names":["useBottomNavigationStyles","makeStyles","root","position","bottom","width","useBottomNavigationActionStyles","color","selected","BottomNavigation","actions","selectedAction","onChange","props","bottomNavigationStyles","bottomNavigationActionClasses","value","showLabels","classes","map","action","i","label","icon","data-testid","Typography","variant","attributes","useCardStyles","marginBottom","cursor","Card","labelVariant","children","styles","separateContentAndButtons","cardActionsChildren","cardStyles","style","cardContent","Divider","divider","cardActions","usePaginationStyles","ul","justifyContent","Pagination","pages","paginationClasses","count","siblingCount","FETCH_POKEMONS_LIST","FETCH_POKEMON_DETAIL","FETCH_MY_POKEMONS","CATCH_POKEMON","RELEASE_MY_POKEMON","SET_CURRENT_POKEMONS_LIST_PAGE","SET_CURRENT_MY_POKEMONS_LIST_PAGE","SET_SELECTED_BOTTOM_ACTION","isEmpty","dataToBeChecked","_isEmptyObject","object","length","Object","keys","some","element","ROOT_URL","fetchPokemonsList","params","a","url","additionalParams","key","join","request","axios","get","catch","error","response","type","types","payload","fetchPokemonDetail","pokemonName","toTitleCase","str","replace","toLowerCase","m","toUpperCase","ceiling","valueToBeCalculated","Math","ceil","PokemonsList","dispatch","useDispatch","history","useHistory","useState","currentlyDisplayedPokemonsList","setCurrentlyDisplayedPokemonsList","useSelector","state","allPokemonsList","PokemonReducer","pokemonsList","currentPokemonsListPage","pageOffset","pageLimit","allPokemonsCount","useEffect","offset","limit","className","pokemon","name","onClick","push","_","newPage","setCurrentPokemonsListPage","page","Image","src","image","height","display","margin","paddingTop","textAlign","NothingToShow","Pokeball","Button","paddingBottom","paddingLeft","float","releaseButton","borderColor","marginTop","MyPokemonList","currentlyDisplayedMyPokemonsList","setCurrentlyDisplayedMyPokemonsList","myPokemonsList","myPokemonsListCount","currentMyPokemonsListPage","slice","reduce","result","onReleasePokemon","pokemonNickname","releaseMyPokemon","size","evt","preventDefault","stopPropagation","setCurrentMyPokemonsListPage","Home","selectedBottomAction","renderBottomTab","newAction","Boolean","window","location","hostname","match","POKEMON_LOCAL_STORAGE_KEY","getItemFromLocalStorage","localStorageKey","itemFromLocalStorage","localStorage","getItem","JSON","parse","setItemToLocalStorage","valueForLocalStorage","setItem","stringify","removeItemFromLocalStorage","removeItem","initialState","pokemonsListCount","currentPokemon","searchTerm","status","data","results","moves","move","myPokemons","pokemons","newMyPokemons","newPokemonsList","rootReducer","combineReducers","PRIMARY_COLOR","SECONDARY_COLOR","theme","createMuiTheme","palette","primary","main","secondary","FormDialog","open","dialogTitle","dialogSubTitle","textFieldLabel","textFieldOnChange","textFieldValue","dialogConfirmButtonLabel","onSubmit","autoFocus","fullWidth","inputProps","useListItemStyles","backgroundColor","opacity","List","listItems","iconSelector","labelSelector","listItemStyles","listItem","Alert","elevation","Snackbar","snackbarStatus","autoHideDuration","handleClose","handleSnackbarClose","reason","onClose","severity","message","pokemonDetailWrapper","avatar","padding","typesSection","movesSection","maxHeight","overflow","pokemonNameTitle","catchPokemonButton","PokemonDetail","setSnackbarStatus","formDialogOpen","setFormDialogOpen","formDialogTextField","setFormDialogTextField","pokemonNameFromSlug","sprites","front_default","alt","random","setOpen","target","checkIfPokemonNicknameAlreadyExists","catchPokemon","goBack","AppWrapper","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","basename","process","ThemeProvider","store","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAKMA,EAA4BC,YAAW,CAC3CC,KAAM,CACNC,SAAU,QACRC,OAAQ,EACRC,MAAO,UAILC,EAAkCL,YAAW,CACjDC,KAAM,CACJ,aAAc,CACZK,MAAO,YAGXC,SAAU,CACRD,MAAO,aA6CIE,EA5BU,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,SAAaC,EAAY,uDAEvEC,EAAyBd,IACzBe,EAAgCT,IAErC,OACE,cAAC,IAAD,yBACEU,MAAOL,EACPC,SAAUA,EACVK,YAAU,EACVC,QAASJ,GACLD,GALN,aAOGH,EAAQS,KAAI,SAACC,EAAQC,GACpB,OACE,cAAC,IAAD,CACEH,QAASH,EAETO,MAAOF,EAAOE,MACdC,OAAQH,EAAOG,MAAQH,EAAOG,KAC9BC,cAAaJ,EAAOE,OAHfD,U,2DC/BFI,EARI,SAAC,GAAuC,IAArCH,EAAoC,EAApCA,MAAOI,EAA6B,EAA7BA,QAAYC,EAAiB,mCACxD,OACE,cAAC,IAAD,yBAAeD,QAASA,GAAaC,GAArC,aACGL,M,SCVDM,EAAgB3B,YAAW,CAC/BC,KAAM,CACJ2B,aAAc,MACdC,OAAQ,aA8CGC,EA3BF,SAAC,GAOP,IANLT,EAMI,EANJA,MAMI,IALJU,oBAKI,MALW,IAKX,EAJJC,EAII,EAJJA,SAII,IAHJC,cAGI,MAHK,GAGL,MAFJC,iCAEI,SADDR,EACC,wFAECS,EAAsBH,EACtBI,EAAaT,IAElB,OACE,cAAC,IAAD,yBAASV,QAASmB,GAAgBV,GAAlC,aACE,eAAC,IAAD,CAAgBW,MAAOJ,EAAOK,YAA9B,UACE,cAAC,EAAD,CAAYjB,MAAOA,EAAOI,QAASM,EAAcR,cAAY,eAC5DW,GAA6B,cAACK,EAAA,EAAD,CAASF,MAAOJ,EAAOO,UAClDL,EACD,cAAC,IAAD,CAAgBE,MAAOJ,EAAOQ,YAA9B,SACGN,IAED,Y,SC/CNO,EAAsB1C,YAAW,CACrC2C,GAAI,CACFC,eAAgB,YA6BLC,EAdI,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAUpB,EAAiB,yBACzCqB,EAAoBL,IAC1B,OACE,cAAC,IAAD,aACEnB,cAAY,aACZN,QAAS8B,EACTC,MAAOF,EACPxC,MAAM,UACN2C,aAAc,GACVvB,K,0CC9BGwB,EAAsB,sBACtBC,EAAuB,uBACvBC,EAAoB,oBACpBC,EAAgB,gBAChBC,EAAqB,qBACrBC,EAAiC,iCACjCC,EAAoC,oCACpCC,EAA6B,6BCP7BC,EAAU,SAACC,GACtB,OACqB,GAAnBA,GAC2B,qBAApBA,GACY,MAAnBA,GAC4B,kBAApBA,GAAgCC,EAAeD,IAI9CC,EAAiB,SAAjBA,EAAkBC,GAC3B,MAA6B,qBAAlBA,EAAOC,QAEEC,OAAOC,KAAKH,GAAQI,MAAK,SAAkBC,GAC3D,OAAQR,EAAQG,EAAOK,QAEIN,EAAeG,OAAOC,KAAKH,KAGlDA,EAAOI,MAAK,SAAkBC,GAEpC,OAAQR,EAAQQ,OChBhBC,EAAQ,4BAEDC,EAAiB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACzBC,EADyB,UAChBJ,EADgB,YAExBT,EAAQW,KACHG,EAAmBT,OAAOC,KAAKK,GAChCnD,KAAI,SAACuD,GAAD,OAASA,EAAM,IAAMJ,EAAOI,MAChCC,KAAK,QAENH,GAAG,WAAQC,IAGbG,EAAUC,IAAMC,IAAIN,GAAKO,OAAM,SAACC,GAClC,OAAOA,EAAMC,YAXY,kBAatB,CACTC,KAAMC,EACNC,QAASR,IAfsB,2CAAH,sDAmBjBS,EAAqB,SAACC,GAClC,IAAId,EAAG,UAAMJ,EAAN,oBAA0BkB,GACxBV,EAAUC,IAAMC,IAAIN,GAAKO,OAAM,SAACC,GAClC,OAAOA,EAAMC,YAEjB,MAAO,CACTC,KAAMC,EACNC,QAASR,IChCEW,EAAc,SAACC,GACxB,OAAOA,EAAIC,QAAQ,mBAAoB,SACtCA,QAAQ,UAAW,KACnBC,cACAD,QAAQ,eAAe,SAASE,GAAK,OAAOA,EAAEC,iBAC9CH,QAAQ,OAAQ,KAChBA,QAAQ,YAAa,KCNbI,EAAU,SAACC,GACpB,OAAOC,KAAKC,KAAKF,ICgGNG,GAjFM,WACnB,IAAMC,EAAWC,cACXC,EAAUC,cAFS,EAOrBC,mBAAS,IAPY,mBAKvBC,EALuB,KAMvBC,EANuB,OAerBC,aAAY,SAACC,GACf,MAAO,CACLC,gBAAiBD,EAAME,eAAeC,aACtCC,wBAAyBJ,EAAME,eAAeE,wBAC9CC,WAAYL,EAAME,eAAeG,WACjCC,UAAWN,EAAME,eAAeI,UAChCC,iBAAkBP,EAAME,eAAeK,qBAXzCN,EAVuB,EAUvBA,gBACAG,EAXuB,EAWvBA,wBACAC,EAZuB,EAYvBA,WACAC,EAbuB,EAavBA,UACAC,EAduB,EAcvBA,iBAYFC,qBAAU,WACRhB,EAAS7B,EAAkB,CAAE8C,OAAQJ,EAAYK,MAAOJ,OACvD,IAEHE,qBAAU,WACHvD,EAAQgD,EAAgBG,KAC3BN,EACEG,EAAgBG,MAGnB,CAACH,IAyBJ,OACE,sBAAKU,UAAU,iBAAf,UACGd,EAA+BpF,KAAI,SAACmG,GACnC,OACE,cAAC,EAAD,CACEhG,MAAOiE,EAAY+B,EAAQC,MAC3BvF,aAAa,KACbwF,QAAS,kBAZKlC,EAYgBgC,EAAQC,KAX9CrB,EAASb,EAAmBC,SAC5Bc,EAAQqB,KAAR,mBAAyBnC,IAFJ,IAACA,QAgBpB,cAAC,EAAD,CACE1E,SAhCe,SAAC8G,EAAGC,GACvBzB,EHFsC,SAACyB,GAC1C,MAAO,CACNzC,KAAMC,EACNC,QAASuC,GGDEC,CAA2BD,IAChChE,EAAQgD,EAAgBgB,IAC1BzB,EACE7B,EAAkB,CAChB8C,QAASQ,EAAU,GAAKX,EACxBI,MAAOJ,KAIXR,EAAkCG,EAAgBgB,KAuBhDE,KAAMf,EACN/D,MAAO8C,EAAQoB,EAAmBD,S,UCzE3Bc,GAJD,SAAC,GAA4B,IAA1BtD,EAAyB,EAAzBA,IAAQ7C,EAAiB,uBACxC,OAAO,cAAC,KAAD,aAAWH,cAAY,QAAQuG,IAAKvD,GAAS7C,KCfvC,OAA0B,yCCMnCO,GAAS,CACb8F,MAAO,CACLC,OAAQ,IACR5H,MAAO,IACP6H,QAAS,QACTC,OAAQ,OACRC,WAAY,OAEd9G,MAAO,CACL4G,QAAS,QACTG,UAAW,SACXF,OAAQ,QA6BGG,GAdO,SAAC,GAAe,IAAbhH,EAAY,EAAZA,MACvB,OACE,sBAAKE,cAAY,kBAAjB,UACE,cAAC,GAAD,CAAOuG,IAAKQ,GAAU7G,QAAQ,SAASY,MAAOJ,GAAO8F,QACrD,cAAC,EAAD,CACEtG,QAAQ,IACRnB,MAAM,gBACNe,MAAOA,EACPgB,MAAOJ,GAAOZ,Y,UCjBPkH,GARA,SAAC,GAAoD,IAAlDlH,EAAiD,EAAjDA,MAAiD,IAA1CI,eAA0C,MAAhC,WAAgC,EAAjBC,EAAiB,mCACjE,OACE,cAAC,KAAD,yBAAWH,cAAY,SAASE,QAASA,EAASnB,MAAM,WAAcoB,GAAtE,aACGL,MCADY,GAAS,CACbK,YAAa,CACXkG,cAAe,GAEjB/F,YAAa,CACXgG,YAAa,EACbC,MAAO,SAETC,cAAe,CACbrI,MAAO,UACPsI,YAAa,WAEfpG,QAAS,CACPqG,UAAW,KAgHAC,GA5GO,WACpB,IAAM7C,EAAWC,cACXC,EAAUC,cAFU,EAOtBC,mBAAS,IAPa,mBAKxB0C,EALwB,KAMxBC,EANwB,OActBxC,aAAY,SAACC,GACf,MAAO,CACLwC,eAAgBxC,EAAME,eAAesC,eACrCC,oBAAqBzC,EAAME,eAAeuC,oBAC1CC,0BAA2B1C,EAAME,eAAewC,0BAChDpC,UAAWN,EAAME,eAAeI,cATlCkC,EAVwB,EAUxBA,eACAC,EAXwB,EAWxBA,oBACAC,EAZwB,EAYxBA,0BACApC,EAbwB,EAaxBA,UAWFE,qBAAU,WACRhB,ERvBI,CACNhB,KAAMC,IQuBJ8D,EACEjF,OAAOC,KAAKiF,GACTG,MAAM,EAAGrC,GACTsC,QAAO,SAACC,EAAQ7E,GAEf,OADA6E,EAAO7E,GAAOwE,EAAexE,GACtB6E,IACN,OAEN,IAGHrC,qBAAU,WACR+B,EACEjF,OAAOC,KAAKiF,GACTG,OACED,EAA4B,GAAKpC,GACjCoC,EAA4B,GAAKpC,EAAYA,GAE/CsC,QAAO,SAACC,EAAQ7E,GAEf,OADA6E,EAAO7E,GAAOwE,EAAexE,GACtB6E,IACN,OAEN,CAACH,EAA2BF,IAG/B,IAUMM,EAAmB,SAACC,GAAD,OACvBvD,ERjD4B,SAACuD,GAChC,MAAO,CACNvE,KAAMC,EACNC,QAASqE,GQ8CEC,CAAiBD,KAE5B,OACE,qBAAKpC,UAAU,iBAAf,SACI1D,EAAQqF,GAmCR,cAAC,GAAD,CAAe1H,MAAO,+CAlCtB,gCACG0C,OAAOC,KAAK+E,GAAkC7H,KAC7C,SAACsI,GACC,OACE,cAAC,EAAD,CACEnI,MAAOmI,EACPzH,aAAa,KACbwF,QAAS,kBAvBDlC,EAwBS4D,EAAeO,GAvB9CvD,EAASb,EAAmBC,SAC5Bc,EAAQqB,KAAR,mBAAyBnC,IAFJ,IAACA,GA0BRpD,OAAQA,GACRC,2BAAyB,EAP3B,SASE,cAAC,GAAD,CACEwH,KAAK,QACLrI,MAAM,UACNgB,MAAOJ,GAAO0G,cACdpB,QAAS,SAACoC,GACRA,EAAIC,iBACJD,EAAIE,kBACJN,EAAiBC,WAO7B,cAAC,EAAD,CACE7I,SAtCW,SAAC8G,EAAGC,GAAJ,OACnBzB,ER/BwC,SAACyB,GAC5C,MAAO,CACNzC,KAAMC,EACNC,QAASuC,GQ4BEoC,CAA6BpC,KAsC9BE,KAAMuB,EACNrG,MAAO8C,EAAQsD,EAAsBnC,WCrFlCgD,I,OApCF,WACX,IAAM9D,EAAWC,cAEX8D,EAAuBxD,aAAY,SAACC,GACxC,OAAOA,EAAME,eAAeqD,wBAe9B,OACE,sBAAK5C,UAAU,iBAAf,UAZsB,WACtB,OAAQ4C,GACN,KAAK,EACH,OAAO,cAAC,GAAD,IACT,KAAK,EACH,OAAO,cAAC,GAAD,IACT,QACE,OAAO,cAAC,GAAD,KAMRC,GACD,cAAC,EAAD,CACEvJ,eAAgBsJ,EAChBrJ,SAAU,SAAC8G,EAAGyC,GAAJ,OACRjE,ETkCF,CACNhB,KAAMC,EACNC,QSpCyC+E,KAEnCzJ,QAAS,CACP,CAAEY,MAAO,gBAAiBC,KAAM,cAAC,IAAD,KAChC,CAAED,MAAO,cAAeC,KAAM,cAAC,IAAD,aC7BpB6I,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDChBOC,GAA4B,cAE5BC,GAA0B,SAACC,GACpC,IAAMC,EAAuBC,aAAaC,QAAQH,GAClD,OAAKhH,EAAQiH,GAGN,KAFIG,KAAKC,MAAMJ,IAKbK,GAAwB,SAACN,EAAiBO,GAAlB,OACjCL,aAAaM,QAAQR,EAAiBI,KAAKK,UAAUF,KAE5CG,GAA6B,SAACV,GAAD,OACtCE,aAAaS,WAAWX,ICPtBY,GAAe,CACnBC,kBAAmB,KACnB3E,aAAc,GACd4E,eAAgB,KAChBvC,eAAgB,GAChBwC,WAAY,GACZvC,oBAAqB,KACrBpC,WAAY,EACZC,UAAW,GACXF,wBAAyB,EACzBsC,0BAA2B,EAC3Ba,qBAAsB,GAoITrD,OAjIf,WAAuD,IAA/BF,EAA8B,uDAAtB6E,GAAcnK,EAAQ,uCACpD,OAAQA,EAAO8D,MACb,KAAKC,EACH,GAA8B,MAA1B/D,EAAOgE,QAAQuG,OACjB,OAAO,2BACFjF,GADL,IAEEG,aAAa,2BACRH,EAAMG,cADC,mBAETH,EAAMI,wBAA0B1F,EAAOgE,QAAQwG,KAAKC,UAEvD5E,iBAAkB7F,EAAOgE,QAAQwG,KAAK3I,MACtC8D,YAAaL,EAAMI,wBAA0B,GAAKJ,EAAMM,YAI9D,KAAK7B,EACH,GAA8B,MAA1B/D,EAAOgE,QAAQuG,OACjB,OAAO,2BACFjF,GADL,IAEE+E,eAAe,2BACVrK,EAAOgE,QAAQwG,MADN,IAEZzG,MAAO/D,EAAOgE,QAAQwG,KAAKzG,MAAMhE,KAAI,SAAC+D,GAAD,OAAUA,EAAKA,QACpD4G,MAAO1K,EAAOgE,QAAQwG,KAAKE,MAAM3K,KAAI,SAAC4K,GAAD,OAAUA,EAAKA,YAK5D,KAAK5G,EACH,IAAI6G,EAAatB,GAAwBD,IACzC,OAAI9G,EAAQqI,GACH,2BACFtF,GADL,IAEEwC,eAAgB,GAChBC,oBAAqB,IAGlB,2BACFzC,GADL,IAEEwC,eAAgB8C,EAAWC,SAC3B9C,oBAAqB6C,EAAW/I,QAGpC,KAAKkC,EACH,IAAMsE,EAAkBrI,EAAOgE,QACzB4G,EAAatB,GAAwBD,IAC3C,GAAIuB,EAAWC,SAASxC,GAAkB,CAExC,GAAyB,IAArBuC,EAAW/I,MAEb,OADAoI,GAA2BZ,IACpB,2BACF/D,GADL,IAEEwC,eAAgB,KAEb,MAKD8C,EAAWC,SADVC,GAJA,EAGFzC,GAHE,eAGFA,GAHE,YAWL,OALAuC,EAAW/I,OAAS,EACpBgI,GAAsBR,GAA2B,CAC/CxH,MAAO+I,EAAW/I,MAClBgJ,SAAUC,IAEL,2BACFxF,GADL,IAEEwC,eAAgBgD,IAItB,OAAO,2BACFxF,GADL,IAEEwC,eAAgB8C,IAGpB,KAAK7G,EACH,IAAIgH,EADoB,EAEiB/K,EAAOgE,QAAxCqE,EAFgB,EAEhBA,gBAAiBnE,EAFD,EAECA,YACnB0G,EAAatB,GAAwBD,IAoB3C,OAPE0B,EAXGxI,EAAQqI,GAWO,CAChB/I,MAAO,EACPgJ,SAAS,gBAAIxC,EAAkBnE,IAXf,CAChBrC,MAAO+I,EAAW/I,MAAQ,EAC1BgJ,SAAS,2BACJD,EAAWC,UADR,mBAELxC,EAAkBnE,KAWzB2F,GAAsBR,GAA2B0B,GAC1C,2BACFzF,GADL,IAEEwC,eAAgBiD,IAGpB,KAAKhH,EACH,IAAMwC,EAAUvG,EAAOgE,QACvB,OAAO,2BACFsB,GADL,IAEEI,wBAAyBa,IAG7B,KAAKxC,EACH,IAAMwC,EAAUvG,EAAOgE,QACvB,OAAO,2BACFsB,GADL,IAEE0C,0BAA2BzB,IAG/B,KAAKxC,EACH,IAAM8E,EAAuB7I,EAAOgE,QACpC,OAAO,2BACFsB,GADL,IAEEuD,yBAGJ,QACE,OAAOvD,IC7IE0F,GAJKC,aAAgB,CAChCzF,oB,4BCFS0F,GAAgB,UAChBC,GAAkB,UAElBC,GAAQC,aAAe,CAChCC,QAAS,CACLC,QAAS,CACLC,KAAMN,IAEVO,UAAW,CAEPD,KAAML,O,4DCsDHO,GAtCI,SAAC,GASb,IARLC,EAQI,EARJA,KACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,eACAC,EAKI,EALJA,eAEAC,GAGI,EAJJC,eAII,EAHJD,mBACAE,EAEI,EAFJA,yBACAC,EACI,EADJA,SAEA,OACE,eAAC,KAAD,CAAWP,KAAMA,EAAjB,UACE,cAAC,KAAD,CAAgBvL,cAAY,eAA5B,SAA4CwL,IAC5C,eAAC,KAAD,WACE,cAAC,KAAD,CAAsBxL,cAAY,kBAAlC,SAAqDyL,IACrD,cAAC,KAAD,CACEM,WAAS,EACTpF,OAAO,QACP7G,MAAO4L,EACPhI,KAAK,OACLsI,WAAS,EAET5M,SAAUuM,EACVM,WAAY,CAAC,cAAe,0BAGhC,cAAC,KAAD,UACE,cAAC,GAAD,CACE/L,QAAQ,OACR8F,QAAS8F,EACT/M,MAAM,UACNe,MAAO+L,U,wCChDXK,GAAoBzN,YAAW,CACnCC,KAAM,CACJyN,gBAAiBrB,GACjB/L,MAAO,UACPqN,QAAS,OAwCEC,GAvBF,SAAC,GAIP,IAHLC,EAGI,EAHJA,UAGI,IAFJC,oBAEI,MAFW,OAEX,MADJC,qBACI,MADY,QACZ,EACEC,EAAiBP,KAEvB,OACE,cAAC,KAAD,UACGI,EAAU3M,KAAI,SAAC+M,EAAU7M,GACxB,OACE,eAAC,KAAD,CAAqBH,QAAS+M,EAAgBxL,SAAO,EAArD,WACIkB,EAAQuK,EAASH,KACjB,cAAC,KAAD,UAAkBG,EAASH,KAE7B,cAAC,KAAD,CAAiBvM,cAAa0M,EAASF,GAAgBrB,QAASpH,EAAY2I,EAASF,QAJrE3M,S,oBCvC5B,SAAS8M,GAAMtN,GACb,OAAO,cAAC,KAAD,aAAUuN,UAAW,GAAOvN,IAgBrC,IAiCewN,GAjCE,SAAC,GAMX,IALLC,EAKI,EALJA,eACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,YAGI,IAFJ9M,eAEI,MAFM,SAEN,EADDC,EACC,6EACE8M,EAAsB,SAAC/G,EAAGgH,GACf,cAAXA,GAGJF,EAAY,2BAAKF,GAAN,IAAsBvB,MAAM,MAGzC,OACE,cAAC,KAAD,yBACEA,KAAMuB,EAAevB,KACrBwB,iBAAkBA,EAClBI,QAASF,EACTjN,cAAa,YACTG,GALN,aAOE,cAAC,GAAD,CACEgN,QAASF,EACTG,SAAUN,EAAeM,SACzBlN,QAASA,EAHX,SAKG4M,EAAeO,cC1BlB3M,GAAS,CACb4M,qBAAsB,CACpBjN,aAAc,GAEhBkN,OAAQ,CACN5G,OAAQ,SACR9H,MAAO,IACP4H,OAAQ,IACR0F,gBAAiBpB,GACjByC,QAAS,QACTpB,QAAS,KAEXqB,aAAc,CACZ9G,OAAQ,OAEV+G,aAAc,CACZ/G,OAAQ,MACRgH,UAAW,IACXC,SAAU,QAEZC,iBAAkB,CAAEhH,UAAW,SAAU9H,MAAO+L,IAChDgD,mBAAoB,CAClBpH,QAAS,QACT7H,MAAO,MACP8H,OAAQ,WAkIGoH,GA9HO,SAAC,GAAe,IAAb/E,EAAY,EAAZA,MACjBtE,EAAWC,cACXC,EAAUC,cAFmB,EAISC,mBAAS,CACnDyG,MAAM,EACN6B,SAAU,GACVC,QAAS,KAPwB,mBAI5BP,EAJ4B,KAIZkB,EAJY,OASSlJ,oBAAS,GATlB,mBAS5BmJ,EAT4B,KASZC,EATY,OAUmBpJ,mBAAS,IAV5B,mBAU5BqJ,EAV4B,KAUPC,EAVO,KAY7BnE,EAAiBhF,aAAY,SAACC,GAClC,OAAOA,EAAME,eAAe6E,kBAGxBoE,EAAsBrF,EAAMlG,OAAOgB,YACnCA,EAAe3B,EAAQ8H,GAEzB,IADAlG,EAAYkG,EAAelE,MAI/BL,qBAAU,WACJvD,EAAQ8H,IACVvF,EAASb,EAAmBwK,MAE7B,IA8CH,OACE,qBAAKxI,UAAU,iBAAiB/E,MAAOJ,GAAO4M,qBAA9C,SACE,sBAAKzH,UAAU,iBAAf,WACI1D,EAAQ8H,IACR,gCACE,cAAC,GAAD,CACEjH,IAAKiH,EAAeqE,QAAQC,cAC5BC,IAAKvE,EAAelE,KACpBjF,MAAOJ,GAAO6M,SAEhB,cAAC,EAAD,CACEzN,MAAOgE,EACP5D,QAAS,KACTY,MAAOJ,GAAOmN,mBAEhB,sBAAK/M,MAAOJ,GAAO+M,aAAnB,UACE,cAAC,EAAD,CAAY3N,MAAO,QAASI,QAAS,OACrC,cAAC,GAAD,CAAMoM,UAAWrC,EAAetG,MAAO6I,cAAc,YAEvD,sBAAK1L,MAAOJ,GAAOgN,aAAnB,UACE,cAAC,EAAD,CAAY5N,MAAO,QAASI,QAAS,OACrC,cAAC,GAAD,CAAMoM,UAAWrC,EAAeK,MAAOkC,cAAc,YAEvD,cAAC,GAAD,CACExG,QAnEgB,WC/ECzB,KAAKkK,SAAW,IDiFzCP,GAAkB,GAClBF,EAAkB,CAChBzC,MAAM,EACN6B,SAAU,UACVC,QAAQ,mCAAD,OAAqCvJ,MAG9CkK,EAAkB,CAChBzC,MAAM,EACN6B,SAAU,QACVC,QAAQ,+BAAD,OAAiCvJ,MAwDlChD,MAAOJ,GAAOoN,mBACdhO,MAAK,gBAAWgE,QAKtB,cAAC,GAAD,CACEyH,KAAM0C,EACNS,QAASR,EACT1C,YAAY,eACZC,eAAe,6CACfC,eAAe,WACfE,eAAgBuC,EAChBxC,kBA/DsB,SAACvD,GAAD,OAC5BgG,EAAuBhG,EAAIuG,OAAOnP,QA+D5BqM,yBAAyB,gBACzBC,SA7DoB,WACE,KAAxBqC,KPpF2C,SAAChF,EAAiBlB,GACjE,IAAMuC,EAAatB,GAAwBC,GAC3C,QAAIhH,EAAQqI,KAAeA,EAAWC,SAASxC,IOoF1C2G,CACC3F,GACAkF,IAGFzJ,ElBnEoB,SAACuD,EAAiBnE,GAC7C,MAAO,CACNJ,KAAMC,EACNC,QAAS,CAACqE,kBAAiBnE,gBkBgEZ+K,CAAaV,EAAqBlE,EAAelE,OAC1DmI,GAAkB,GAClBtJ,EAAQkK,UAERd,EAAkB,CAChBzC,MAAM,EACN6B,SAAU,QACVC,QAAQ,8DAiDV,cAAC,GAAD,CACEP,eAAgBA,EAChBC,iBAAkB,IAClBC,YAAagB,EACb9N,QAAQ,iBE3JZ6O,GAAa,WACf,IAAMC,EAA4BC,aAAgBC,KAAhBD,CAC9BE,MAGJ,OACI,cAAC,KAAD,CAAeC,SAAUC,0BAAzB,SACI,cAACC,GAAA,EAAD,CAAetE,MAAOA,GAAtB,SACI,cAAC,IAAD,CAAUuE,MAAOP,EAA0BpE,IAA3C,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO4E,OAAK,EAACC,KAAK,IAAIC,UAAWlH,KACjC,cAAC,IAAD,CAAOgH,OAAK,EAACC,KAAK,WAAWC,UAAWlH,KACxC,cAAC,IAAD,CAAOgH,OAAK,EAACC,KAAK,wBAAwBC,UAAW3B,eAQ7E4B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,SV6FtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d158a2fc.chunk.js","sourcesContent":["import React from \"react\";\nimport MuiBottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport MuiBottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useBottomNavigationStyles = makeStyles({\n  root: {\n\t\tposition: 'fixed',\n    bottom: 0,\n    width: '100%',\n  },\n});\n\nconst useBottomNavigationActionStyles = makeStyles({\n  root: {\n    \"&$selected\": {\n      color: \"#7D4CDB\",\n    },\n  },\n  selected: {\n    color: \"#7D4CDB\",\n  },\n});\n\n/**\n * BottomNavigation Component\n *\n * @since  16/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Array}  actions  Actions inside the bottom navigation for users to select which action\n * @param {Number}  selectedAction  The selected action in the form of index of the actions array\n * @param {Function}  onChange  onChange handler\n *\n */\n\nconst BottomNavigation = ({ actions, selectedAction, onChange, ...props }) => {\n\n\tconst bottomNavigationStyles = useBottomNavigationStyles();\n\tconst bottomNavigationActionClasses = useBottomNavigationActionStyles();\n\n  return (\n    <MuiBottomNavigation\n      value={selectedAction}\n      onChange={onChange}\n      showLabels\n      classes={bottomNavigationStyles}\n      {...props}\n    >\n      {actions.map((action, i) => {\n        return (\n          <MuiBottomNavigationAction\n            classes={bottomNavigationActionClasses}\n            key={i}\n            label={action.label}\n            icon={!!action.icon && action.icon}\n            data-testid={action.label}\n          />\n        );\n      })}\n    </MuiBottomNavigation>\n  );\n};\n\nexport default BottomNavigation;\n","import React from \"react\";\nimport MuiTypography from \"@material-ui/core/Typography\";\n\n/**\n * Typography Component\n *\n * @since  14/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {String}  label  Status of the snackbar including (Open/Close, severity and message)\n * @param {String}  variant  Valid variations of HTML text tags e.g. h1, h2, h3, p\n *\n */\n\nconst Typography = ({ label, variant, ...attributes }) => {\n  return (\n    <MuiTypography variant={variant} {...attributes}>\n      {label}\n    </MuiTypography>\n  );\n};\n\nexport default Typography;\n","import React from \"react\";\nimport MuiCard from \"@material-ui/core/Card\";\nimport MuiCardActions from \"@material-ui/core/CardActions\";\nimport MuiCardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"../Typography/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useCardStyles = makeStyles({\n  root: {\n    marginBottom: '1em',\n    cursor: 'pointer'\n  },\n});\n\n/**\n * Card Component\n *\n * @since  15/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {String}  label  Card label\n * @param {NUMBER}  labelVariant  Label HTML text tag variant e.g. h1, h2, h3, p\n * @param {ReactNode}  children  Children DOM node of the card\n * @param {Object}  styles  UYser defined styles\n * @param {Boolean}  separateContentAndButtons  Add a divider to separate content and buttons\n *\n */\n\nconst Card = ({\n  label,\n  labelVariant = \"p\",\n  children,\n  styles = {},\n  separateContentAndButtons = false,\n  ...attributes\n}) => {\n\n\tconst cardActionsChildren = children;\n\tconst cardStyles = useCardStyles();\n\n  return (\n    <MuiCard classes={cardStyles} {...attributes}>\n      <MuiCardContent style={styles.cardContent}>\n        <Typography label={label} variant={labelVariant} data-testid=\"card-label\" />\n        {separateContentAndButtons && <Divider style={styles.divider} />}\n        {!!cardActionsChildren ? (\n          <MuiCardActions style={styles.cardActions}>\n            {cardActionsChildren}\n          </MuiCardActions>\n        ) : null}\n      </MuiCardContent>\n    </MuiCard>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport MuiPagination from \"@material-ui/lab/Pagination\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst usePaginationStyles = makeStyles({\n  ul: {\n    justifyContent: \"center\",\n  },\n});\n\n/**\n * Pagination Component\n *\n * @since  15/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Number}  pages  No of pages to be rendered by the Pagination component\n *\n */\n\nconst Pagination = ({ pages, ...attributes }) => {\n  const paginationClasses = usePaginationStyles();\n  return (\n    <MuiPagination\n      data-testid=\"pagination\"\n      classes={paginationClasses}\n      count={pages}\n      color=\"primary\"\n      siblingCount={1}\n      {...attributes}\n    />\n  );\n};\n\nexport default Pagination;\n","export const FETCH_POKEMONS_LIST = 'FETCH_POKEMONS_LIST';\nexport const FETCH_POKEMON_DETAIL = 'FETCH_POKEMON_DETAIL';\nexport const FETCH_MY_POKEMONS = 'FETCH_MY_POKEMONS';\nexport const CATCH_POKEMON = 'CATCH_POKEMON';\nexport const RELEASE_MY_POKEMON = 'RELEASE_MY_POKEMON';\nexport const SET_CURRENT_POKEMONS_LIST_PAGE = 'SET_CURRENT_POKEMONS_LIST_PAGE';\nexport const SET_CURRENT_MY_POKEMONS_LIST_PAGE = 'SET_CURRENT_MY_POKEMONS_LIST_PAGE';\nexport const SET_SELECTED_BOTTOM_ACTION = 'SET_SELECTED_BOTTOM_ACTION';","export const isEmpty = (dataToBeChecked) => {\n  return (\n    dataToBeChecked == false ||\n    typeof dataToBeChecked === \"undefined\" ||\n    dataToBeChecked == null ||\n    (typeof dataToBeChecked === \"object\" && _isEmptyObject(dataToBeChecked))\n  );\n};\n\nexport const _isEmptyObject = (object) => {\n    if (typeof object.length === \"undefined\") {\n      // it's an Object, not an Array\n      var hasNonempty = Object.keys(object).some(function nonEmpty(element) {\n        return !isEmpty(object[element]);\n      });\n      return hasNonempty ? false : _isEmptyObject(Object.keys(object));\n    }\n\n    return !object.some(function nonEmpty(element) {\n      // check if array is really not empty as JS thinks\n      return !isEmpty(element); // at least one element should be non-empty\n    });\n  };","import axios from \"axios\"; //import axios library for performing ajax request\nimport * as types from \"../actions/types\";\nimport { isEmpty } from \"../utilities/check-if-empty.utils\";\n\nconst ROOT_URL = `https://pokeapi.co/api/v2`;\n\nexport const fetchPokemonsList = async (params) => {\n    let url = `${ROOT_URL}/pokemon`;\n    if (!isEmpty(params)) {\n        const additionalParams = Object.keys(params)\n            .map((key) => key + \"=\" + params[key])\n            .join(\"&\");\n        if (additionalParams) {\n            url += `?${additionalParams}`;\n        }\n    }\n    const request = axios.get(url).catch((error) => {\n        return error.response;\n    });\n    return {\n\t\ttype: types.FETCH_POKEMONS_LIST,\n\t\tpayload: request\n\t};\n};\n\nexport const fetchPokemonDetail = (pokemonName) => {\n\tlet url = `${ROOT_URL}/pokemon/${pokemonName}`;\n    const request = axios.get(url).catch((error) => {\n        return error.response;\n    });\n    return {\n\t\ttype: types.FETCH_POKEMON_DETAIL,\n\t\tpayload: request\n\t};;\n}\n\nexport const fetchMyPokemons = () => {\n\treturn {\n\t\ttype: types.FETCH_MY_POKEMONS,\n\t}\n}\n\nexport const catchPokemon = (pokemonNickname, pokemonName) => {\n\treturn {\n\t\ttype: types.CATCH_POKEMON,\n\t\tpayload: {pokemonNickname, pokemonName}\n\t}\n}\n\nexport const releaseMyPokemon = (pokemonNickname) => {\n\treturn {\n\t\ttype: types.RELEASE_MY_POKEMON,\n\t\tpayload: pokemonNickname\n\t}\n}\n\nexport const setCurrentPokemonsListPage = (newPage) => {\n\treturn {\n\t\ttype: types.SET_CURRENT_POKEMONS_LIST_PAGE,\n\t\tpayload: newPage\n\t}\n}\n\nexport const setCurrentMyPokemonsListPage = (newPage) => {\n\treturn {\n\t\ttype: types.SET_CURRENT_MY_POKEMONS_LIST_PAGE,\n\t\tpayload: newPage\n\t}\n}\n\nexport const setSelectedBottomAction = (bottomAction) => {\n\treturn {\n\t\ttype: types.SET_SELECTED_BOTTOM_ACTION,\n\t\tpayload: bottomAction\n\t}\n}","export const toTitleCase = (str) => {\n    return str.replace(/([^A-Z])([A-Z])/g, '$1 $2') // split cameCase\n    .replace(/[_\\-]+/g, ' ') // split snake_case and lisp-case\n    .toLowerCase()\n    .replace(/(^\\w|\\b\\w)/g, function(m) { return m.toUpperCase(); }) // title case words\n    .replace(/\\s+/g, ' ') // collapse repeated whitespace\n    .replace(/^\\s+|\\s+$/, ''); // remove leading/trailing whitespace\n};\n","export const ceiling = (valueToBeCalculated) => {\n    return Math.ceil(valueToBeCalculated)\n}","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Card from \"../../components/Card/Card\";\nimport Pagination from \"../../components/Pagination/Pagination\";\n\nimport {\n  fetchPokemonDetail,\n  fetchPokemonsList,\n  setCurrentPokemonsListPage,\n} from \"../../actions/actions\";\nimport { toTitleCase } from \"../../utilities/string.utils\";\nimport { ceiling } from \"../../utilities/number.utils\";\nimport { isEmpty } from \"../../utilities/check-if-empty.utils\";\n\nconst PokemonsList = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const [\n    currentlyDisplayedPokemonsList,\n    setCurrentlyDisplayedPokemonsList,\n  ] = useState([]);\n\n  const {\n    allPokemonsList,\n    currentPokemonsListPage,\n    pageOffset,\n    pageLimit,\n    allPokemonsCount,\n  } = useSelector((state) => {\n    return {\n      allPokemonsList: state.PokemonReducer.pokemonsList,\n      currentPokemonsListPage: state.PokemonReducer.currentPokemonsListPage,\n      pageOffset: state.PokemonReducer.pageOffset,\n      pageLimit: state.PokemonReducer.pageLimit,\n      allPokemonsCount: state.PokemonReducer.allPokemonsCount,\n    };\n  });\n\n  // To get the pokemons list from API in the first component mount\n  useEffect(() => {\n    dispatch(fetchPokemonsList({ offset: pageOffset, limit: pageLimit }));\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(allPokemonsList[currentPokemonsListPage])) {\n      setCurrentlyDisplayedPokemonsList(\n        allPokemonsList[currentPokemonsListPage]\n      );\n    }\n  }, [allPokemonsList]);\n\n\t/* When the user changes page, it first checks if the pokemon data set for that page exists\n\t * if not then, calls the API for the next data set\n\t */\n  const onChangePage = (_, newPage) => {\n    dispatch(setCurrentPokemonsListPage(newPage));\n    if (isEmpty(allPokemonsList[newPage])) {\n      dispatch(\n        fetchPokemonsList({\n          offset: (newPage - 1) * pageLimit,\n          limit: pageLimit,\n        })\n      );\n    } else {\n      setCurrentlyDisplayedPokemonsList(allPokemonsList[newPage]);\n    }\n  };\n\n\t// On click event handler when the user clicks on a pokemon card\n  const onPokemonClick = (pokemonName) => {\n    dispatch(fetchPokemonDetail(pokemonName));\n    history.push(`/pokemon/${pokemonName}`);\n  };\n\n  return (\n    <div className=\"Global-content\">\n      {currentlyDisplayedPokemonsList.map((pokemon) => {\n        return (\n          <Card\n            label={toTitleCase(pokemon.name)}\n            labelVariant=\"h6\"\n            onClick={() => onPokemonClick(pokemon.name)}\n          />\n        );\n      })}\n      <Pagination\n        onChange={onChangePage}\n        page={currentPokemonsListPage}\n        pages={ceiling(allPokemonsCount / pageLimit)}\n      />\n    </div>\n  );\n};\n\nexport default PokemonsList;\n","import React from \"react\";\nimport MuiAvatar from \"@material-ui/core/Avatar\";\n\n/**\n * Image Component\n *\n * @since  16/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {String}  url the url or location of the image\n *\n */\n\nconst Image = ({ url, ...attributes }) => {\n  return <MuiAvatar data-testid=\"image\" src={url} {...attributes} />;\n};\n\nexport default Image;\n","export default __webpack_public_path__ + \"static/media/pokeball-big.c95b8da7.png\";","import React from \"react\";\r\nimport Image from \"../Image/Image\";\r\nimport Typography from \"../Typography/Typography\";\r\n\r\nimport Pokeball from \"../../assets/pokeball-big.png\";\r\n\r\nconst styles = {\r\n  image: {\r\n    height: 100,\r\n    width: 100,\r\n    display: \"block\",\r\n    margin: \"auto\",\r\n    paddingTop: \"50%\",\r\n  },\r\n  label: {\r\n    display: \"block\",\r\n    textAlign: \"center\",\r\n    margin: \"1em\",\r\n  },\r\n};\r\n\r\n/**\r\n * NothingToShow Component\r\n *\r\n * @since  19/11/2020\r\n * @access (public)\r\n *\r\n * @type     Functional Component\r\n * @param {Object}  label  the label to be rendered in the middle of the page\r\n *\r\n */\r\n\r\nconst NothingToShow = ({ label }) => {\r\n  return (\r\n    <div data-testid=\"nothing-to-show\">\r\n      <Image src={Pokeball} variant=\"square\" style={styles.image} />\r\n      <Typography\r\n        variant=\"p\"\r\n        color=\"textSecondary\"\r\n        label={label}\r\n        style={styles.label}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NothingToShow;\r\n","import React from \"react\";\nimport MuiButton from \"@material-ui/core/Button\";\n\n/**\n * Button Component\n *\n * @since  14/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {String}  label  Label of the button\n * @param {String}  variant  variations of the button (text, outlined, filled)\n *\n */\n\nconst Button = ({ label, variant = \"outlined\", ...attributes }) => {\n  return (\n    <MuiButton data-testid=\"button\" variant={variant} color=\"primary\" {...attributes}>\n      {label}\n    </MuiButton>\n  );\n};\n\nexport default Button;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Card from \"../../components/Card/Card\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport NothingToShow from \"../../components/NothingToShow/NothingToShow\";\n\nimport {\n  fetchMyPokemons,\n  fetchPokemonDetail,\n  releaseMyPokemon,\n  setCurrentMyPokemonsListPage,\n} from \"../../actions/actions\";\nimport { ceiling } from \"../../utilities/number.utils\";\nimport Button from \"../../components/Button/Button\";\nimport { isEmpty } from \"../../utilities/check-if-empty.utils\";\n\nconst styles = {\n  cardContent: {\n    paddingBottom: 0,\n  },\n  cardActions: {\n    paddingLeft: 0,\n    float: \"right\",\n  },\n  releaseButton: {\n    color: \"#f44336\",\n    borderColor: \"#f44336\",\n  },\n  divider: {\n    marginTop: 20,\n  },\n};\n\nconst MyPokemonList = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const [\n    currentlyDisplayedMyPokemonsList,\n    setCurrentlyDisplayedMyPokemonsList,\n  ] = useState([]);\n\n  const {\n    myPokemonsList,\n    myPokemonsListCount,\n    currentMyPokemonsListPage,\n    pageLimit,\n  } = useSelector((state) => {\n    return {\n      myPokemonsList: state.PokemonReducer.myPokemonsList,\n      myPokemonsListCount: state.PokemonReducer.myPokemonsListCount,\n      currentMyPokemonsListPage: state.PokemonReducer.currentMyPokemonsListPage,\n      pageLimit: state.PokemonReducer.pageLimit,\n    };\n  });\n\n  // Get the user's pokemons list and divide them into per page\n  useEffect(() => {\n    dispatch(fetchMyPokemons());\n    setCurrentlyDisplayedMyPokemonsList(\n      Object.keys(myPokemonsList)\n        .slice(0, pageLimit)\n        .reduce((result, key) => {\n          result[key] = myPokemonsList[key];\n          return result;\n        }, {})\n    );\n  }, []);\n\n  // Get the next set of pokemons when user changes page\n  useEffect(() => {\n    setCurrentlyDisplayedMyPokemonsList(\n      Object.keys(myPokemonsList)\n        .slice(\n          (currentMyPokemonsListPage - 1) * pageLimit,\n          (currentMyPokemonsListPage - 1) * pageLimit + pageLimit\n        )\n        .reduce((result, key) => {\n          result[key] = myPokemonsList[key];\n          return result;\n        }, {})\n    );\n  }, [currentMyPokemonsListPage, myPokemonsList]);\n\n  // On click event handler when the user clicks on a pokemon card\n  const onPokemonClick = (pokemonName) => {\n    dispatch(fetchPokemonDetail(pokemonName));\n    history.push(`/pokemon/${pokemonName}`);\n  };\n\n  // On click event handler when the user changes the page\n  const onChangePage = (_, newPage) =>\n    dispatch(setCurrentMyPokemonsListPage(newPage));\n\n  // On click event handler when the user clicks on the release pokemon button\n  const onReleasePokemon = (pokemonNickname) =>\n    dispatch(releaseMyPokemon(pokemonNickname));\n\n  return (\n    <div className=\"Global-content\">\n      {!isEmpty(currentlyDisplayedMyPokemonsList) ? (\n        <div>\n          {Object.keys(currentlyDisplayedMyPokemonsList).map(\n            (pokemonNickname) => {\n              return (\n                <Card\n                  label={pokemonNickname}\n                  labelVariant=\"h6\"\n                  onClick={() =>\n                    onPokemonClick(myPokemonsList[pokemonNickname])\n                  }\n                  styles={styles}\n                  separateContentAndButtons\n                >\n                  <Button\n                    size=\"small\"\n                    label=\"Release\"\n                    style={styles.releaseButton}\n                    onClick={(evt) => {\n                      evt.preventDefault();\n                      evt.stopPropagation();\n                      onReleasePokemon(pokemonNickname);\n                    }}\n                  />\n                </Card>\n              );\n            }\n          )}\n          <Pagination\n            onChange={onChangePage}\n            page={currentMyPokemonsListPage}\n            pages={ceiling(myPokemonsListCount / pageLimit)}\n          />\n        </div>\n      ) : (\n        <NothingToShow label={\"Sorry, you have not caught any pokemon yet\"} />\n      )}\n    </div>\n  );\n};\n\nexport default MyPokemonList;\n","import React from \"react\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport BottomNavigation from \"../../components/BottomNavigation/BottomNavigation\";\nimport PokemonsList from \"../PokemonsList/PokemonsList\";\nimport MyPokemonList from \"../MyPokemonList/MyPokemonList\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSelectedBottomAction } from \"../../actions/actions\";\n\nimport \"../../global.css\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n\n  const selectedBottomAction = useSelector((state) => {\n    return state.PokemonReducer.selectedBottomAction;\n  });\n\n\t// Render the bottom navigation\n  const renderBottomTab = () => {\n    switch (selectedBottomAction) {\n      case 0:\n        return <PokemonsList />;\n      case 1:\n        return <MyPokemonList />;\n      default:\n        return <PokemonsList />;\n    }\n  };\n\n  return (\n    <div className=\"Global-wrapper\">\n      {renderBottomTab()}\n      <BottomNavigation\n        selectedAction={selectedBottomAction}\n        onChange={(_, newAction) =>\n          dispatch(setSelectedBottomAction(newAction))\n        }\n        actions={[\n          { label: \"Pokemons List\", icon: <ListIcon /> },\n          { label: \"My Pokemons\", icon: <FavoriteIcon /> },\n        ]}\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { isEmpty } from \"./check-if-empty.utils\";\n\nexport const POKEMON_LOCAL_STORAGE_KEY = 'MY_POKEMONS';\n\nexport const getItemFromLocalStorage = (localStorageKey) => {\n    const itemFromLocalStorage = localStorage.getItem(localStorageKey);\n    if (!isEmpty(itemFromLocalStorage)) {\n        return JSON.parse(itemFromLocalStorage);\n    }\n    return null;\n};\n\nexport const setItemToLocalStorage = (localStorageKey, valueForLocalStorage) =>\n    localStorage.setItem(localStorageKey, JSON.stringify(valueForLocalStorage));\n\nexport const removeItemFromLocalStorage = (localStorageKey) =>\n    localStorage.removeItem(localStorageKey);\n\nexport const checkIfPokemonNicknameAlreadyExists = (localStorageKey, pokemonNickname) => {\n    const myPokemons = getItemFromLocalStorage(localStorageKey);\n    if(!isEmpty(myPokemons) && myPokemons.pokemons[pokemonNickname]) {\n        return true;\n    }\n    return false;\n}","import * as types from \"../actions/types\";\nimport { isEmpty } from \"../utilities/check-if-empty.utils\";\nimport {\n  getItemFromLocalStorage,\n  POKEMON_LOCAL_STORAGE_KEY,\n  removeItemFromLocalStorage,\n  setItemToLocalStorage,\n} from \"../utilities/local-storage.utils\";\n\nconst initialState = {\n  pokemonsListCount: null,\n  pokemonsList: [],\n  currentPokemon: null,\n  myPokemonsList: {},\n  searchTerm: \"\",\n  myPokemonsListCount: null,\n  pageOffset: 0,\n  pageLimit: 20,\n  currentPokemonsListPage: 1,\n  currentMyPokemonsListPage: 1,\n  selectedBottomAction: 0, // the index of the bottom action used by the Material-UI library to determine which destination is rendered\n};\n\nfunction PokemonReducer(state = initialState, action) {\n  switch (action.type) {\n    case types.FETCH_POKEMONS_LIST: {\n      if (action.payload.status === 200) {\n        return {\n          ...state,\n          pokemonsList: {\n            ...state.pokemonsList,\n            [state.currentPokemonsListPage]: action.payload.data.results,\n          },\n          allPokemonsCount: action.payload.data.count,\n          pageOffset: (state.currentPokemonsListPage - 1) * state.pageLimit,\n        };\n      }\n    }\n    case types.FETCH_POKEMON_DETAIL: {\n      if (action.payload.status === 200) {\n        return {\n          ...state,\n          currentPokemon: {\n            ...action.payload.data,\n            types: action.payload.data.types.map((type) => type.type),\n            moves: action.payload.data.moves.map((move) => move.move),\n          },\n        };\n      }\n    }\n    case types.FETCH_MY_POKEMONS: {\n      let myPokemons = getItemFromLocalStorage(POKEMON_LOCAL_STORAGE_KEY);\n      if (isEmpty(myPokemons)) {\n        return {\n          ...state,\n          myPokemonsList: {},\n          myPokemonsListCount: 0,\n        };\n      }\n      return {\n        ...state,\n        myPokemonsList: myPokemons.pokemons,\n        myPokemonsListCount: myPokemons.count,\n      };\n    }\n    case types.RELEASE_MY_POKEMON: {\n      const pokemonNickname = action.payload;\n      const myPokemons = getItemFromLocalStorage(POKEMON_LOCAL_STORAGE_KEY);\n      if (myPokemons.pokemons[pokemonNickname]) {\n        // Check if the pokemon deleted is the last one\n        if (myPokemons.count === 1) {\n          removeItemFromLocalStorage(POKEMON_LOCAL_STORAGE_KEY);\n          return {\n            ...state,\n            myPokemonsList: {},\n          };\n        } else {\n\t\t\t\t\t// Delete the pokemon and lower the total pokemon count\n          const {\n            [pokemonNickname]: nickname,\n            ...newMyPokemons\n          } = myPokemons.pokemons;\n          myPokemons.count -= 1;\n          setItemToLocalStorage(POKEMON_LOCAL_STORAGE_KEY, {\n            count: myPokemons.count,\n            pokemons: newMyPokemons,\n          });\n          return {\n            ...state,\n            myPokemonsList: newMyPokemons,\n          };\n        }\n      }\n      return {\n        ...state,\n        myPokemonsList: myPokemons,\n      };\n    }\n    case types.CATCH_POKEMON: {\n      let newPokemonsList;\n      const { pokemonNickname, pokemonName } = action.payload;\n      const myPokemons = getItemFromLocalStorage(POKEMON_LOCAL_STORAGE_KEY);\n\n      if (!isEmpty(myPokemons)) {\n        // Check if there is existing pokemon\n        newPokemonsList = {\n          count: myPokemons.count + 1,\n          pokemons: {\n            ...myPokemons.pokemons,\n            [pokemonNickname]: pokemonName,\n          },\n        };\n      } else {\n\t\t\t\t// Add the pokemon to localStorage and increment the pokemon count\n        newPokemonsList = {\n          count: 1,\n          pokemons: { [pokemonNickname]: pokemonName },\n        };\n      }\n\n      setItemToLocalStorage(POKEMON_LOCAL_STORAGE_KEY, newPokemonsList);\n      return {\n        ...state,\n        myPokemonsList: newPokemonsList,\n      };\n    }\n    case types.SET_CURRENT_POKEMONS_LIST_PAGE: {\n      const newPage = action.payload;\n      return {\n        ...state,\n        currentPokemonsListPage: newPage,\n      };\n    }\n    case types.SET_CURRENT_MY_POKEMONS_LIST_PAGE: {\n      const newPage = action.payload;\n      return {\n        ...state,\n        currentMyPokemonsListPage: newPage,\n      };\n    }\n    case types.SET_SELECTED_BOTTOM_ACTION: {\n      const selectedBottomAction = action.payload;\n      return {\n        ...state,\n        selectedBottomAction,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default PokemonReducer;\n","import { combineReducers } from 'redux';\nimport PokemonReducer from './pokemon-reducer';\n\nconst rootReducer = combineReducers({\n    PokemonReducer\n});\n\nexport default rootReducer;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const PRIMARY_COLOR = '#7D4CDB';\nexport const SECONDARY_COLOR = '#11CB5F';\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: PRIMARY_COLOR,\n        },\n        secondary: {\n            // This is green.A700 as hex.\n            main: SECONDARY_COLOR,\n        },\n    },\n});\n","import React from \"react\";\nimport MuiTextField from \"@material-ui/core/TextField\";\nimport MuiDialog from \"@material-ui/core/Dialog\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogContentText from \"@material-ui/core/DialogContentText\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\n\nimport Button from \"../Button/Button\";\n\n/**\n * FormDialog Component\n *\n * @since  16/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Boolean}  open  Status of the dialog box to be opened or closed\n * @param {String}  dialogTitle  The dialog box title\n * @param {String}  dialogSubTitle  The dialog box subtitle\n * @param {String}  textFieldLabel  The text field label inside the dialog box\n * @param {String}  textFieldValue  The text field value inside the dialog box\n * @param {Function}  textFieldOnChange  On change event handler for text field component\n * @param {String}  dialogConfirmButtonLabel  The label of the confirm button inside the dialog box\n * @param {Function}  onSubmit  On submit function if the user clicks the button inside the dialog box\n *\n */\n\nconst FormDialog = ({\n  open,\n  dialogTitle,\n  dialogSubTitle,\n  textFieldLabel,\n  textFieldValue,\n  textFieldOnChange,\n  dialogConfirmButtonLabel,\n  onSubmit,\n}) => {\n  return (\n    <MuiDialog open={open}>\n      <MuiDialogTitle data-testid=\"dialog-title\">{dialogTitle}</MuiDialogTitle>\n      <MuiDialogContent>\n        <MuiDialogContentText data-testid=\"dialog-subtitle\">{dialogSubTitle}</MuiDialogContentText>\n        <MuiTextField\n          autoFocus\n          margin=\"dense\"\n          label={textFieldLabel}\n          type=\"text\"\n          fullWidth\n          // value={textFieldValue}\n          onChange={textFieldOnChange}\n          inputProps={{'data-testid': \"dialog-text-field\"}}\n        />\n      </MuiDialogContent>\n      <MuiDialogActions>\n        <Button\n          variant=\"text\"\n          onClick={onSubmit}\n          color=\"primary\"\n          label={dialogConfirmButtonLabel}\n        />\n      </MuiDialogActions>\n    </MuiDialog>\n  );\n};\n\nexport default FormDialog;\n","import React from \"react\";\nimport MuiList from \"@material-ui/core/List\";\nimport MuiListItem from \"@material-ui/core/ListItem\";\nimport MuiListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport MuiListItemText from \"@material-ui/core/ListItemText\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { isEmpty } from \"../../utilities/check-if-empty.utils\";\nimport { toTitleCase } from \"../../utilities/string.utils\";\nimport { PRIMARY_COLOR } from \"../../utilities/theme.const\";\n\nconst useListItemStyles = makeStyles({\n  root: {\n    backgroundColor: PRIMARY_COLOR,\n    color: \"#ffffff\",\n    opacity: 0.75,\n  },\n});\n\n/**\n * List Component\n *\n * @since  15/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Array}  listItems  Items to be rendered by the list\n * @param {NUMBER}  iconSelector  the key selector of each item object to get the icon for that particular item\n * @param {Function}  labelSelector  the key selector of each item object to get the label for that particular item\n *\n */\n\nconst List = ({\n  listItems,\n  iconSelector = \"icon\",\n  labelSelector = \"label\",\n}) => {\n  const listItemStyles = useListItemStyles();\n\n  return (\n    <MuiList>\n      {listItems.map((listItem, i) => {\n        return (\n          <MuiListItem key={i} classes={listItemStyles} divider>\n            {!isEmpty(listItem[iconSelector]) && (\n              <MuiListItemIcon>{listItem[iconSelector]}</MuiListItemIcon>\n            )}\n            <MuiListItemText data-testid={listItem[labelSelector]} primary={toTitleCase(listItem[labelSelector])} />\n          </MuiListItem>\n        );\n      })}\n    </MuiList>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport MuiSnackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} {...props} />;\n}\n\n/**\n * Snackbar Component\n *\n * @since  17/11/2020\n * @access (public)\n *\n * @type     Functional Component\n * @param {Object}  snackbarStatus  Status of the snackbar including (Open/Close, severity and message)\n * @param {NUMBER}  autoHideDuration  the duration until the Snackbar Component disappears\n * @param {Function}  handleClose  onChange handler\n * @param {String}  variant  Predefined styles from Material-UI for the Snackbar Component\n *\n */\nconst Snackbar = ({\n  snackbarStatus,\n  autoHideDuration,\n  handleClose,\n  variant = \"filled\",\n  ...attributes\n}) => {\n  const handleSnackbarClose = (_, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    handleClose({ ...snackbarStatus, open: false });\n\t};\n\t\n  return (\n    <MuiSnackbar\n      open={snackbarStatus.open}\n      autoHideDuration={autoHideDuration}\n      onClose={handleSnackbarClose}\n      data-testid={'snackbar'}\n      {...attributes}\n    >\n      <Alert\n        onClose={handleSnackbarClose}\n        severity={snackbarStatus.severity}\n        variant={variant}\n      >\n        {snackbarStatus.message}\n      </Alert>\n    </MuiSnackbar>\n  );\n};\n\nexport default Snackbar;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Button from \"../../components/Button/Button\";\nimport FormDialog from \"../../components/FormDialog/FormDialog\";\nimport Image from \"../../components/Image/Image\";\nimport List from \"../../components/List/List\";\nimport Snackbar from \"../../components/Snackbar/Snackbar\";\nimport Typography from \"../../components/Typography/Typography\";\n\nimport { catchPokemon, fetchPokemonDetail } from \"../../actions/actions\";\nimport { isEmpty } from \"../../utilities/check-if-empty.utils\";\nimport { toTitleCase } from \"../../utilities/string.utils\";\nimport {\n  checkIfPokemonNicknameAlreadyExists,\n  POKEMON_LOCAL_STORAGE_KEY,\n} from \"../../utilities/local-storage.utils\";\nimport { isSuccess } from \"../../utilities/catch-probability\";\n\nimport { PRIMARY_COLOR, SECONDARY_COLOR } from \"../../utilities/theme.const\";\n\nconst styles = {\n  pokemonDetailWrapper: {\n    marginBottom: 0,\n  },\n  avatar: {\n    margin: \"0 auto\",\n    width: 120,\n    height: 120,\n    backgroundColor: SECONDARY_COLOR,\n    padding: \"0.5em\",\n    opacity: 0.75,\n  },\n  typesSection: {\n    margin: \"1em\",\n  },\n  movesSection: {\n    margin: \"1em\",\n    maxHeight: 500,\n    overflow: \"auto\",\n  },\n  pokemonNameTitle: { textAlign: \"center\", color: PRIMARY_COLOR },\n  catchPokemonButton: {\n    display: \"block\",\n    width: \"95%\",\n    margin: \"0 auto\",\n  },\n};\n\nconst PokemonDetail = ({ match }) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const [snackbarStatus, setSnackbarStatus] = useState({\n    open: false,\n    severity: \"\",\n    message: \"\",\n  });\n  const [formDialogOpen, setFormDialogOpen] = useState(false);\n  const [formDialogTextField, setFormDialogTextField] = useState(\"\");\n\n  const currentPokemon = useSelector((state) => {\n    return state.PokemonReducer.currentPokemon;\n  });\n\n  const pokemonNameFromSlug = match.params.pokemonName;\n  const pokemonName = !isEmpty(currentPokemon)\n    ? toTitleCase(currentPokemon.name)\n    : \"-\";\n\n  // Get the pokemon render when this component first mounted\n  useEffect(() => {\n    if (isEmpty(currentPokemon)) {\n      dispatch(fetchPokemonDetail(pokemonNameFromSlug));\n    }\n  }, []);\n\n  // On click handler when the Catch Pokemon button is clicked\n  const onCatchPokemonClick = () => {\n    if (isSuccess()) {\n      setFormDialogOpen(true);\n      setSnackbarStatus({\n        open: true,\n        severity: \"success\",\n        message: `Congratulations you have caught ${pokemonName}`,\n      });\n    } else {\n      setSnackbarStatus({\n        open: true,\n        severity: \"error\",\n        message: `Too bad! You did not caught ${pokemonName}`,\n      });\n    }\n  };\n\n  // Change the nickname of the pokemon\n  const onChangeNicknameField = (evt) =>\n    setFormDialogTextField(evt.target.value);\n\n  // On submit handler when the user clicked on the Submit button in the form dialog\n  const onSubmitNewNickname = () => {\n    if (formDialogTextField !== \"\") {\n      if (\n        !checkIfPokemonNicknameAlreadyExists(\n          POKEMON_LOCAL_STORAGE_KEY,\n          formDialogTextField\n        )\n      ) {\n        dispatch(catchPokemon(formDialogTextField, currentPokemon.name));\n        setFormDialogOpen(false);\n        history.goBack();\n      } else {\n        setSnackbarStatus({\n          open: true,\n          severity: \"error\",\n          message: `Nickname already exists, please give another nickname`,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"Global-wrapper\" style={styles.pokemonDetailWrapper}>\n      <div className=\"Global-content\">\n        {!isEmpty(currentPokemon) && (\n          <div>\n            <Image\n              url={currentPokemon.sprites.front_default}\n              alt={currentPokemon.name}\n              style={styles.avatar}\n            />\n            <Typography\n              label={pokemonName}\n              variant={\"h3\"}\n              style={styles.pokemonNameTitle}\n            />\n            <div style={styles.typesSection}>\n              <Typography label={\"Types\"} variant={\"h4\"} />\n              <List listItems={currentPokemon.types} labelSelector=\"name\" />\n            </div>\n            <div style={styles.movesSection}>\n              <Typography label={\"Moves\"} variant={\"h4\"} />\n              <List listItems={currentPokemon.moves} labelSelector=\"name\" />\n            </div>\n            <Button\n              onClick={onCatchPokemonClick}\n              style={styles.catchPokemonButton}\n              label={`Catch ${pokemonName}`}\n            />\n          </div>\n        )}\n\n        <FormDialog\n          open={formDialogOpen}\n          setOpen={setFormDialogOpen}\n          dialogTitle=\"Set Nickname\"\n          dialogSubTitle=\"Set nickname for your newly caught pokemon\"\n          textFieldLabel=\"Nickname\"\n          textFieldValue={formDialogTextField}\n          textFieldOnChange={onChangeNicknameField}\n          dialogConfirmButtonLabel=\"Save Nickname\"\n          onSubmit={onSubmitNewNickname}\n        />\n\n        <Snackbar\n          snackbarStatus={snackbarStatus}\n          autoHideDuration={5000}\n          handleClose={setSnackbarStatus}\n          variant=\"filled\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PokemonDetail;\n","export const isSuccess = () => Math.random() < 0.5;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./containers/Home/Home\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ReduxPromise from \"redux-promise\";\nimport rootReducer from \"./reducers\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport {theme} from \"./utilities/theme.const\";\nimport PokemonDetail from \"./containers/PokemonDetail/PokemonDetail\";\n\nconst AppWrapper = () => {\n    const createStoreWithMiddleware = applyMiddleware(ReduxPromise)(\n        createStore\n    );\n\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <ThemeProvider theme={theme}>\n                <Provider store={createStoreWithMiddleware(rootReducer)}>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route exact path=\"/pokemon\" component={Home} />\n                        <Route exact path=\"/pokemon/:pokemonName\" component={PokemonDetail} />\n                    </Switch>\n                </Provider>\n            </ThemeProvider>\n        </BrowserRouter>\n    );\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppWrapper />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}